#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 1 0 35200
    bytecblock "i" "r" "e" "c" "t" "lr" "z" 0x151f7c75 0x068101
    // contracts/mimc_merkle.algo.ts:25-26
    // @contract({ avmVersion: 11 })
    // export class MimcMerkle extends Contract {
    txn NumAppArgs
    bz main_bare_routing@12
    pushbytess 0xbec76d87 0x8c294051 0xaaacd352 0xdd3375a8 0x023a97ae 0x0e53f306 0x83827cb0 // method "bootstrap()void", method "addLeaf(byte[32])void", method "sealAndRotate()void", method "isValidRoot(byte[32])bool", method "isValidSealedRoot(uint64,byte[32])bool", method "addRoot(byte[32])void", method "_dummy()void"
    txna ApplicationArgs 0
    match main_bootstrap_route@3 main_addLeaf_route@4 main_sealAndRotate_route@5 main_isValidRoot_route@6 main_isValidSealedRoot_route@7 main_addRoot_route@8 main__dummy_route@9

main_after_if_else@16:
    err

main__dummy_route@9:
    // contracts/mimc_merkle.algo.ts:161
    // _dummy(): void {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_addRoot_route@8:
    // contracts/mimc_merkle.algo.ts:154
    // addRoot(rootHash: bytes<32>): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/mimc_merkle.algo.ts:25-26
    // @contract({ avmVersion: 11 })
    // export class MimcMerkle extends Contract {
    txna ApplicationArgs 1
    // contracts/mimc_merkle.algo.ts:154
    // addRoot(rootHash: bytes<32>): void {
    callsub addRoot
    intc_1 // 1
    return

main_isValidSealedRoot_route@7:
    // contracts/mimc_merkle.algo.ts:148
    // isValidSealedRoot(epochId: uint64, root: bytes<32>): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/mimc_merkle.algo.ts:25-26
    // @contract({ avmVersion: 11 })
    // export class MimcMerkle extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // contracts/mimc_merkle.algo.ts:148
    // isValidSealedRoot(epochId: uint64, root: bytes<32>): boolean {
    callsub isValidSealedRoot
    pushbytes 0x00
    intc_2 // 0
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_isValidRoot_route@6:
    // contracts/mimc_merkle.algo.ts:137
    // isValidRoot(root: bytes<32>): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/mimc_merkle.algo.ts:25-26
    // @contract({ avmVersion: 11 })
    // export class MimcMerkle extends Contract {
    txna ApplicationArgs 1
    // contracts/mimc_merkle.algo.ts:137
    // isValidRoot(root: bytes<32>): boolean {
    callsub isValidRoot
    pushbytes 0x00
    intc_2 // 0
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_sealAndRotate_route@5:
    // contracts/mimc_merkle.algo.ts:107
    // sealAndRotate(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub sealAndRotate
    intc_1 // 1
    return

main_addLeaf_route@4:
    // contracts/mimc_merkle.algo.ts:68
    // addLeaf(leafHash: bytes<32>): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/mimc_merkle.algo.ts:25-26
    // @contract({ avmVersion: 11 })
    // export class MimcMerkle extends Contract {
    txna ApplicationArgs 1
    // contracts/mimc_merkle.algo.ts:68
    // addLeaf(leafHash: bytes<32>): void {
    callsub addLeaf
    intc_1 // 1
    return

main_bootstrap_route@3:
    // contracts/mimc_merkle.algo.ts:45
    // bootstrap(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub bootstrap
    intc_1 // 1
    return

main_bare_routing@12:
    // contracts/mimc_merkle.algo.ts:25-26
    // @contract({ avmVersion: 11 })
    // export class MimcMerkle extends Contract {
    txn OnCompletion
    bnz main_after_if_else@16
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 8 // 0x068101
    itxn_field ApprovalProgram
    bytec 8 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_2 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_after_while@7:
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.bootstrap() -> void:
bootstrap:
    // contracts/mimc_merkle.algo.ts:45
    // bootstrap(): void {
    proto 0 0
    // contracts/mimc_merkle.algo.ts:46
    // ensureBudget(MIMC_OPCODE_COST);
    intc_3 // 35200
    intc_2 // 0
    callsub ensure_budget
    // contracts/mimc_merkle.algo.ts:47
    // const tree = new FixedArray<bytes<32>, typeof TREE_HEIGHT>();
    pushint 1024 // 1024
    bzero
    // contracts/mimc_merkle.algo.ts:49
    // tree[0] = op.bzero(32).toFixed({ length: 32 });
    intc_0 // 32
    bzero
    replace2 0 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:51
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    intc_1 // 1

bootstrap_while_top@1:
    // contracts/mimc_merkle.algo.ts:51
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    frame_dig 1
    intc_0 // 32
    <
    bz bootstrap_after_while@3
    // contracts/mimc_merkle.algo.ts:54
    // tree[i - 1].concat(tree[i - 1]),
    frame_dig 1
    dup
    intc_1 // 1
    -
    intc_0 // 32
    *
    frame_dig 0
    dup
    uncover 2
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    dup
    concat
    // contracts/mimc_merkle.algo.ts:52-55
    // tree[i] = op.mimc(
    //   op.MimcConfigurations.BLS12_381Mp111,
    //   tree[i - 1].concat(tree[i - 1]),
    // );
    mimc BLS12_381Mp111
    dig 2
    intc_0 // 32
    *
    swap
    replace3 // on error: index access is out of bounds
    frame_bury 0
    // contracts/mimc_merkle.algo.ts:51
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    intc_1 // 1
    +
    frame_bury 1
    b bootstrap_while_top@1

bootstrap_after_while@3:
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:58
    // this.rootCounter.value = 0;
    intc_2 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:59
    // this.treeIndex.value = 0;
    intc_2 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:60
    // this.rootCache.create();
    pushint 1600 // 1600
    box_create
    pop
    // contracts/mimc_merkle.algo.ts:35
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec 6 // "z"
    // contracts/mimc_merkle.algo.ts:61
    // this.zeroHashes.value = clone(tree);
    frame_dig 0
    dup
    cover 2
    box_put
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:62
    // this.subtree.value = clone(tree);
    dig 1
    box_put
    // contracts/mimc_merkle.algo.ts:38
    // epochId = GlobalState<uint64>({ key: "e" });
    bytec_2 // "e"
    // contracts/mimc_merkle.algo.ts:63
    // this.epochId.value = 0;
    intc_2 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:65
    // this.lastComputedRoot.value = tree[TREE_HEIGHT - 1];
    pushint 992 // 992
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:65
    // this.lastComputedRoot.value = tree[TREE_HEIGHT - 1];
    swap
    app_global_put
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.addLeaf(leafHash: bytes) -> void:
addLeaf:
    // contracts/mimc_merkle.algo.ts:68
    // addLeaf(leafHash: bytes<32>): void {
    proto 1 0
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:70
    // ensureBudget(MIMC_OPCODE_COST + Global.minTxnFee * 2);
    global MinTxnFee
    pushint 2 // 2
    *
    intc_3 // 35200
    +
    intc_2 // 0
    callsub ensure_budget
    // contracts/mimc_merkle.algo.ts:72
    // let index = this.treeIndex.value;
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:72
    // let index = this.treeIndex.value;
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check GlobalState exists
    // contracts/mimc_merkle.algo.ts:74
    // assert(index < 2 ** TREE_HEIGHT, "Tree is full; call sealAndRotate");
    dup
    pushint 4294967296 // 4294967296
    <
    assert // Tree is full; call sealAndRotate
    // contracts/mimc_merkle.algo.ts:76
    // this.treeIndex.value += 1;
    intc_1 // 1
    +
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:76
    // this.treeIndex.value += 1;
    swap
    app_global_put
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:80
    // let subtree = clone(this.subtree.value);
    box_get
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:35
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec 6 // "z"
    // contracts/mimc_merkle.algo.ts:81
    // const zeroHashes = clone(this.zeroHashes.value);
    box_get
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:83
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    intc_2 // 0
    frame_dig -1

addLeaf_while_top@1:
    // contracts/mimc_merkle.algo.ts:83
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    frame_dig 4
    intc_0 // 32
    <
    bz addLeaf_after_while@6
    // contracts/mimc_merkle.algo.ts:84
    // if ((index & 1) === 0) {
    frame_dig 1
    intc_1 // 1
    &
    bnz addLeaf_else_body@4
    // contracts/mimc_merkle.algo.ts:85
    // subtree[i] = currentHash;
    frame_dig 5
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 4
    intc_0 // 32
    *
    frame_dig 2
    dig 1
    dig 3
    replace3 // on error: index access is out of bounds
    frame_bury 2
    // contracts/mimc_merkle.algo.ts:87
    // right = zeroHashes[i];
    frame_dig 3
    swap
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    swap
    frame_bury 0

addLeaf_after_if_else@5:
    // contracts/mimc_merkle.algo.ts:95
    // left.concat(right),
    frame_dig 0
    swap
    concat
    // contracts/mimc_merkle.algo.ts:93-96
    // currentHash = op.mimc(
    //   op.MimcConfigurations.BLS12_381Mp111,
    //   left.concat(right),
    // );
    mimc BLS12_381Mp111
    frame_bury 5
    // contracts/mimc_merkle.algo.ts:98
    // index >>= 1;
    frame_dig 1
    intc_1 // 1
    shr
    frame_bury 1
    // contracts/mimc_merkle.algo.ts:83
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b addLeaf_while_top@1

addLeaf_else_body@4:
    // contracts/mimc_merkle.algo.ts:89
    // left = subtree[i];
    frame_dig 4
    intc_0 // 32
    *
    frame_dig 2
    swap
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    frame_bury 0
    frame_dig 5
    b addLeaf_after_if_else@5

addLeaf_after_while@6:
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:101
    // this.subtree.value = clone(subtree);
    frame_dig 2
    box_put
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:102
    // this.lastComputedRoot.value = currentHash;
    frame_dig 5
    dup
    cover 2
    app_global_put
    // contracts/mimc_merkle.algo.ts:103
    // this.addRoot(currentHash);
    callsub addRoot
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.sealAndRotate() -> void:
sealAndRotate:
    // contracts/mimc_merkle.algo.ts:109
    // assert(this.treeIndex.value > 0, "nothing to seal");
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:109
    // assert(this.treeIndex.value > 0, "nothing to seal");
    app_global_get_ex
    assert // check GlobalState exists
    assert // nothing to seal
    // contracts/mimc_merkle.algo.ts:111
    // const epoch = this.epochId.value;
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:38
    // epochId = GlobalState<uint64>({ key: "e" });
    bytec_2 // "e"
    // contracts/mimc_merkle.algo.ts:111
    // const epoch = this.epochId.value;
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/mimc_merkle.algo.ts:112
    // const epochBoxKey: uint64 = epoch / EPOCHS_PER_BOX;
    dup
    intc_0 // 32
    /
    // contracts/mimc_merkle.algo.ts:113
    // const index: uint64 = epoch % EPOCHS_PER_BOX;
    dig 1
    intc_0 // 32
    %
    // contracts/mimc_merkle.algo.ts:115
    // const epochBox = this.epochBoxes(epochBoxKey);
    swap
    itob
    // contracts/mimc_merkle.algo.ts:41-43
    // epochBoxes = BoxMap<uint64, FixedArray<bytes<32>, typeof EPOCHS_PER_BOX>>({
    //   keyPrefix: "e",
    // });
    bytec_2 // "e"
    swap
    concat
    // contracts/mimc_merkle.algo.ts:116
    // epochBox.create();
    dup
    pushint 1024 // 1024
    box_create
    pop
    // contracts/mimc_merkle.algo.ts:118
    // epochBox.value[index] = this.lastComputedRoot.value;
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:118
    // epochBox.value[index] = this.lastComputedRoot.value;
    app_global_get_ex
    assert // check GlobalState exists
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    uncover 2
    intc_0 // 32
    *
    swap
    box_replace
    // contracts/mimc_merkle.algo.ts:121
    // this.epochId.value = epoch + 1;
    intc_1 // 1
    +
    // contracts/mimc_merkle.algo.ts:38
    // epochId = GlobalState<uint64>({ key: "e" });
    bytec_2 // "e"
    // contracts/mimc_merkle.algo.ts:121
    // this.epochId.value = epoch + 1;
    swap
    app_global_put
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:122
    // this.treeIndex.value = 0;
    intc_2 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:35
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec 6 // "z"
    // contracts/mimc_merkle.algo.ts:123
    // const zeros = clone(this.zeroHashes.value);
    box_get
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:124
    // this.subtree.value = clone(zeros);
    dig 1
    box_put
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:127
    // this.rootCounter.value = 0;
    intc_2 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:130
    // this.rootCache.delete();
    box_del
    pop
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:131
    // this.rootCache.create();
    pushint 1600 // 1600
    box_create
    pop
    // contracts/mimc_merkle.algo.ts:132
    // const emptyRoot = zeros[TREE_HEIGHT - 1];
    pushint 992 // 992
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:133
    // this.lastComputedRoot.value = emptyRoot;
    dig 1
    app_global_put
    // contracts/mimc_merkle.algo.ts:134
    // this.addRoot(emptyRoot);
    callsub addRoot
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.isValidRoot(root: bytes) -> uint64:
isValidRoot:
    // contracts/mimc_merkle.algo.ts:137
    // isValidRoot(root: bytes<32>): boolean {
    proto 1 1
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:138
    // for (const validRoot of this.rootCache.value) {
    box_get
    assert // Box must have value
    intc_2 // 0

isValidRoot_for_header@1:
    // contracts/mimc_merkle.algo.ts:138
    // for (const validRoot of this.rootCache.value) {
    frame_dig 1
    pushint 50 // 50
    <
    bz isValidRoot_after_for@6
    frame_dig 1
    intc_0 // 32
    *
    frame_dig 0
    swap
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:139
    // if (root === validRoot) {
    frame_dig -1
    ==
    bz isValidRoot_after_if_else@4
    // contracts/mimc_merkle.algo.ts:140
    // return true;
    intc_1 // 1
    frame_bury 0
    retsub

isValidRoot_after_if_else@4:
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b isValidRoot_for_header@1

isValidRoot_after_for@6:
    // contracts/mimc_merkle.algo.ts:144
    // return false;
    intc_2 // 0
    frame_bury 0
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.isValidSealedRoot(epochId: uint64, root: bytes) -> uint64:
isValidSealedRoot:
    // contracts/mimc_merkle.algo.ts:148
    // isValidSealedRoot(epochId: uint64, root: bytes<32>): boolean {
    proto 2 1
    // contracts/mimc_merkle.algo.ts:149
    // const epochBoxId: uint64 = epochId / EPOCHS_PER_BOX;
    frame_dig -2
    intc_0 // 32
    /
    // contracts/mimc_merkle.algo.ts:150
    // const index: uint64 = epochId % EPOCHS_PER_BOX;
    frame_dig -2
    intc_0 // 32
    %
    // contracts/mimc_merkle.algo.ts:151
    // return this.epochBoxes(epochBoxId).value[index] === root;
    swap
    itob
    // contracts/mimc_merkle.algo.ts:41-43
    // epochBoxes = BoxMap<uint64, FixedArray<bytes<32>, typeof EPOCHS_PER_BOX>>({
    //   keyPrefix: "e",
    // });
    bytec_2 // "e"
    swap
    concat
    // contracts/mimc_merkle.algo.ts:151
    // return this.epochBoxes(epochBoxId).value[index] === root;
    box_get
    assert // Box must have value
    swap
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.addRoot(rootHash: bytes) -> void:
addRoot:
    // contracts/mimc_merkle.algo.ts:154
    // addRoot(rootHash: bytes<32>): void {
    proto 1 0
    // contracts/mimc_merkle.algo.ts:155
    // const index: uint64 = this.rootCounter.value % ROOT_CACHE_SIZE;
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:155
    // const index: uint64 = this.rootCounter.value % ROOT_CACHE_SIZE;
    app_global_get_ex
    assert // check GlobalState exists
    dup
    pushint 50 // 50
    %
    // contracts/mimc_merkle.algo.ts:156
    // this.rootCache.value[index] = rootHash;
    frame_dig -1
    len
    intc_0 // 32
    ==
    assert // invalid size
    intc_0 // 32
    *
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:156
    // this.rootCache.value[index] = rootHash;
    swap
    frame_dig -1
    box_replace
    // contracts/mimc_merkle.algo.ts:158
    // this.rootCounter.value += 1;
    intc_1 // 1
    +
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:158
    // this.rootCounter.value += 1;
    swap
    app_global_put
    retsub
