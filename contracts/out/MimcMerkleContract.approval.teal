#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 32 0 50
    bytecblock "r" "t" "z" "i"
    // contracts/mimc_merkle.algo.ts:17-18
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleContract extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0xbec76d87 0x8c294051 0xdd3375a8 0x0e53f306 // method "bootstrap()void", method "addLeaf(byte[32])void", method "isValidRoot(byte[32])bool", method "addRoot(byte[32])void"
    txna ApplicationArgs 0
    match main_bootstrap_route@3 main_addLeaf_route@4 main_isValidRoot_route@5 main_addRoot_route@6

main_after_if_else@13:
    err

main_addRoot_route@6:
    // contracts/mimc_merkle.algo.ts:90
    // addRoot(rootHash: bytes<32>): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/mimc_merkle.algo.ts:17-18
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleContract extends Contract {
    txna ApplicationArgs 1
    // contracts/mimc_merkle.algo.ts:90
    // addRoot(rootHash: bytes<32>): void {
    callsub addRoot
    intc_0 // 1
    return

main_isValidRoot_route@5:
    // contracts/mimc_merkle.algo.ts:80
    // isValidRoot(root: bytes<32>): boolean {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/mimc_merkle.algo.ts:17-18
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleContract extends Contract {
    txna ApplicationArgs 1
    // contracts/mimc_merkle.algo.ts:80
    // isValidRoot(root: bytes<32>): boolean {
    callsub isValidRoot
    pushbytes 0x00
    intc_2 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_addLeaf_route@4:
    // contracts/mimc_merkle.algo.ts:46
    // addLeaf(leafHash: bytes<32>): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/mimc_merkle.algo.ts:17-18
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleContract extends Contract {
    txna ApplicationArgs 1
    // contracts/mimc_merkle.algo.ts:46
    // addLeaf(leafHash: bytes<32>): void {
    callsub addLeaf
    intc_0 // 1
    return

main_bootstrap_route@3:
    // contracts/mimc_merkle.algo.ts:29
    // bootstrap(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub bootstrap
    intc_0 // 1
    return

main_bare_routing@9:
    // contracts/mimc_merkle.algo.ts:17-18
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleContract extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/mimc_merkle.algo.ts::MimcMerkleContract.bootstrap() -> void:
bootstrap:
    // contracts/mimc_merkle.algo.ts:29
    // bootstrap(): void {
    proto 0 0
    // contracts/mimc_merkle.algo.ts:30
    // const tree = new FixedArray<bytes<32>, typeof TREE_HEIGHT>();
    pushint 1024 // 1024
    bzero
    // contracts/mimc_merkle.algo.ts:32
    // tree[0] = op.bzero(32).toFixed({ length: 32 });
    intc_1 // 32
    bzero
    replace2 0 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:34
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    intc_0 // 1

bootstrap_while_top@1:
    // contracts/mimc_merkle.algo.ts:34
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    frame_dig 1
    intc_1 // 32
    <
    bz bootstrap_after_while@3
    // contracts/mimc_merkle.algo.ts:37
    // tree[i - 1].concat(tree[i - 1]),
    frame_dig 1
    dup
    intc_0 // 1
    -
    intc_1 // 32
    *
    frame_dig 0
    dup
    uncover 2
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    dup
    concat
    // contracts/mimc_merkle.algo.ts:35-38
    // tree[i] = op.mimc(
    //   op.MimcConfigurations.BLS12_381Mp111,
    //   tree[i - 1].concat(tree[i - 1]),
    // );
    mimc BLS12_381Mp111
    dig 2
    intc_1 // 32
    *
    swap
    replace3 // on error: index access is out of bounds
    frame_bury 0
    // contracts/mimc_merkle.algo.ts:34
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    intc_0 // 1
    +
    frame_bury 1
    b bootstrap_while_top@1

bootstrap_after_while@3:
    // contracts/mimc_merkle.algo.ts:19
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_0 // "r"
    // contracts/mimc_merkle.algo.ts:41
    // this.rootCache.create();
    pushint 1600 // 1600
    box_create
    pop
    // contracts/mimc_merkle.algo.ts:27
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec_2 // "z"
    // contracts/mimc_merkle.algo.ts:42
    // this.zeroHashes.value = clone(tree);
    frame_dig 0
    dup
    cover 2
    box_put
    // contracts/mimc_merkle.algo.ts:23
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec_1 // "t"
    // contracts/mimc_merkle.algo.ts:43
    // this.subtree.value = clone(tree);
    swap
    box_put
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkleContract.addLeaf(leafHash: bytes) -> void:
addLeaf:
    // contracts/mimc_merkle.algo.ts:46
    // addLeaf(leafHash: bytes<32>): void {
    proto 1 0
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:47
    // let index = this.treeIndex.value;
    dup
    // contracts/mimc_merkle.algo.ts:25
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_3 // "i"
    // contracts/mimc_merkle.algo.ts:47
    // let index = this.treeIndex.value;
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check GlobalState exists
    // contracts/mimc_merkle.algo.ts:49
    // assert(index < 2 ** TREE_HEIGHT, "Tree is full");
    dup
    pushint 4294967296 // 4294967296
    <
    assert // Tree is full
    // contracts/mimc_merkle.algo.ts:51
    // this.treeIndex.value += 1;
    intc_0 // 1
    +
    // contracts/mimc_merkle.algo.ts:25
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_3 // "i"
    // contracts/mimc_merkle.algo.ts:51
    // this.treeIndex.value += 1;
    swap
    app_global_put
    // contracts/mimc_merkle.algo.ts:23
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec_1 // "t"
    // contracts/mimc_merkle.algo.ts:55
    // let subtree = clone(this.subtree.value);
    box_get
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:27
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec_2 // "z"
    // contracts/mimc_merkle.algo.ts:56
    // const zeroHashes = clone(this.zeroHashes.value);
    box_get
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:58
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    intc_2 // 0
    frame_dig -1

addLeaf_while_top@1:
    // contracts/mimc_merkle.algo.ts:58
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    frame_dig 4
    intc_1 // 32
    <
    bz addLeaf_after_while@6
    // contracts/mimc_merkle.algo.ts:59
    // if ((index & 1) === 0) {
    frame_dig 1
    intc_0 // 1
    &
    bnz addLeaf_else_body@4
    // contracts/mimc_merkle.algo.ts:60
    // subtree[i] = currentHash;
    frame_dig 5
    dup
    len
    intc_1 // 32
    ==
    assert // invalid size
    frame_dig 4
    intc_1 // 32
    *
    frame_dig 2
    dig 1
    dig 3
    replace3 // on error: index access is out of bounds
    frame_bury 2
    // contracts/mimc_merkle.algo.ts:62
    // right = zeroHashes[i];
    frame_dig 3
    swap
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    swap
    frame_bury 0

addLeaf_after_if_else@5:
    // contracts/mimc_merkle.algo.ts:70
    // left.concat(right),
    frame_dig 0
    swap
    concat
    // contracts/mimc_merkle.algo.ts:68-71
    // currentHash = op.mimc(
    //   op.MimcConfigurations.BLS12_381Mp111,
    //   left.concat(right),
    // );
    mimc BLS12_381Mp111
    frame_bury 5
    // contracts/mimc_merkle.algo.ts:73
    // index >>= 1;
    frame_dig 1
    intc_0 // 1
    shr
    frame_bury 1
    // contracts/mimc_merkle.algo.ts:58
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    frame_dig 4
    intc_0 // 1
    +
    frame_bury 4
    b addLeaf_while_top@1

addLeaf_else_body@4:
    // contracts/mimc_merkle.algo.ts:64
    // left = subtree[i];
    frame_dig 4
    intc_1 // 32
    *
    frame_dig 2
    swap
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    frame_bury 0
    frame_dig 5
    b addLeaf_after_if_else@5

addLeaf_after_while@6:
    // contracts/mimc_merkle.algo.ts:23
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec_1 // "t"
    // contracts/mimc_merkle.algo.ts:76
    // this.subtree.value = clone(subtree);
    frame_dig 2
    box_put
    // contracts/mimc_merkle.algo.ts:77
    // this.addRoot(currentHash);
    frame_dig 5
    callsub addRoot
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkleContract.isValidRoot(root: bytes) -> uint64:
isValidRoot:
    // contracts/mimc_merkle.algo.ts:80
    // isValidRoot(root: bytes<32>): boolean {
    proto 1 1
    // contracts/mimc_merkle.algo.ts:19
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_0 // "r"
    // contracts/mimc_merkle.algo.ts:81
    // for (const validRoot of this.rootCache.value) {
    box_get
    assert // Box must have value
    intc_2 // 0

isValidRoot_for_header@1:
    // contracts/mimc_merkle.algo.ts:81
    // for (const validRoot of this.rootCache.value) {
    frame_dig 1
    intc_3 // 50
    <
    bz isValidRoot_after_for@6
    frame_dig 1
    intc_1 // 32
    *
    frame_dig 0
    swap
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:82
    // if (root === validRoot) {
    frame_dig -1
    ==
    bz isValidRoot_after_if_else@4
    // contracts/mimc_merkle.algo.ts:83
    // return true;
    intc_0 // 1
    frame_bury 0
    retsub

isValidRoot_after_if_else@4:
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b isValidRoot_for_header@1

isValidRoot_after_for@6:
    // contracts/mimc_merkle.algo.ts:87
    // return false;
    intc_2 // 0
    frame_bury 0
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkleContract.addRoot(rootHash: bytes) -> void:
addRoot:
    // contracts/mimc_merkle.algo.ts:90
    // addRoot(rootHash: bytes<32>): void {
    proto 1 0
    // contracts/mimc_merkle.algo.ts:91
    // const index: uint64 = this.rootCounter.value % ROOT_CACHE_SIZE;
    intc_2 // 0
    // contracts/mimc_merkle.algo.ts:21
    // rootCounter = GlobalState<uint64>({ key: "c" });
    pushbytes "c"
    // contracts/mimc_merkle.algo.ts:91
    // const index: uint64 = this.rootCounter.value % ROOT_CACHE_SIZE;
    app_global_get_ex
    assert // check GlobalState exists
    dup
    intc_3 // 50
    %
    // contracts/mimc_merkle.algo.ts:92
    // this.rootCache.value[index] = rootHash;
    frame_dig -1
    len
    intc_1 // 32
    ==
    assert // invalid size
    intc_1 // 32
    *
    // contracts/mimc_merkle.algo.ts:19
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_0 // "r"
    // contracts/mimc_merkle.algo.ts:92
    // this.rootCache.value[index] = rootHash;
    swap
    frame_dig -1
    box_replace
    // contracts/mimc_merkle.algo.ts:94
    // this.rootCounter.value += 1;
    intc_0 // 1
    +
    // contracts/mimc_merkle.algo.ts:21
    // rootCounter = GlobalState<uint64>({ key: "c" });
    pushbytes "c"
    // contracts/mimc_merkle.algo.ts:94
    // this.rootCounter.value += 1;
    swap
    app_global_put
    retsub
