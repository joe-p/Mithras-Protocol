/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"MimcMerkleContract","structs":{},"methods":[{"name":"bootstrap","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addLeaf","args":[{"type":"byte[32]","name":"leafHash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"isValidRoot","args":[{"type":"byte[32]","name":"root"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addRoot","args":[{"type":"byte[32]","name":"rootHash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"rootCounter":{"keyType":"AVMString","valueType":"AVMUint64","key":"Yw=="},"treeIndex":{"keyType":"AVMString","valueType":"AVMUint64","key":"aQ=="}},"local":{},"box":{"rootCache":{"keyType":"AVMString","valueType":"byte[32][50]","key":"cg=="},"subtree":{"keyType":"AVMString","valueType":"byte[32][32]","key":"dA=="},"zeroHashes":{"keyType":"AVMString","valueType":"byte[32][32]","key":"eg=="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[322,327,427],"errorMessage":"Box must have value"},{"pc":[67,82,113,128],"errorMessage":"OnCompletion is not NoOp"},{"pc":[314],"errorMessage":"Tree is full"},{"pc":[145],"errorMessage":"can only call when creating"},{"pc":[70,85,116,131],"errorMessage":"can only call when not creating"},{"pc":[305,475],"errorMessage":"check GlobalState exists"},{"pc":[221,244,254,362,369,404,445],"errorMessage":"index access is out of bounds"},{"pc":[351,485],"errorMessage":"invalid size"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAEASAA4MUIJgUBYwFpAXIBdAMGgQExG0EAbYIEBL7HbYcEjClAUQTdM3WoBA5T8wY2GgCOBAA+AC8AEAABADEZFEQxGEQ2GgGIAYgiQzEZFEQxGEQ2GgGIAUqAAQAkTwJUgAQVH3x1TFCwIkMxGRREMRhENhoBiACmIkMxGRREMRhEiABIIkMxGUD/sTEYFEQiQ4oCAIv+gQoIiwAyDA1BACqxgQayEIEFshknBLIeJwSyH4v/jQIACwAEs0L/2zIAsgFC//UksgFC/++JigAAJSSI/72BgAivI69cACKLASMMQQAhiwFJIgkjC4sASU8CI1hJUOYBSwIjC0xdjAAiCIwBQv/YKCRnKSRnKoHADLlIgAF6iwBJTgK/K0y/iYoBACQlJIj/aiQpZUxJTwJESYGAgICAEAxEIggpTGcrvkSAAXq+RCSL/4sEIwxBAEqLASIaQAAziwVJFSMSRIsEIwuLAksBSwNdjAKLA0wjWEyMAIsATFDmAYwFiwEikYwBiwQiCIwEQv+/iwQjC4sCTCNYjACLBUL/2SuLAr+LBYgAMImKAQEqvkQkiwGBMgxBAByLASMLiwBMI1iL/xJBAAQijACJiwEiCIwBQv/cJIwAiYoBACQoZURJgTIYi/8VIxJEIwsqTIv/uyIIKExniQ==","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the MimcMerkleContract contract
 */
export type MimcMerkleContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap()void': Record<string, never>
    'addLeaf(byte[32])void': {
      leafHash: Uint8Array
    }
    'isValidRoot(byte[32])bool': {
      root: Uint8Array
    }
    'addRoot(byte[32])void': {
      rootHash: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap()void': []
    'addLeaf(byte[32])void': [leafHash: Uint8Array]
    'isValidRoot(byte[32])bool': [root: Uint8Array]
    'addRoot(byte[32])void': [rootHash: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type MimcMerkleContractReturns = {
  'bootstrap()void': void
  'addLeaf(byte[32])void': void
  'isValidRoot(byte[32])bool': boolean
  'addRoot(byte[32])void': void
}

/**
 * Defines the types of available calls and state of the MimcMerkleContract smart contract.
 */
export type MimcMerkleContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: MimcMerkleContractArgs['obj']['bootstrap()void']
      argsTuple: MimcMerkleContractArgs['tuple']['bootstrap()void']
      returns: MimcMerkleContractReturns['bootstrap()void']
    }>
    & Record<'addLeaf(byte[32])void' | 'addLeaf', {
      argsObj: MimcMerkleContractArgs['obj']['addLeaf(byte[32])void']
      argsTuple: MimcMerkleContractArgs['tuple']['addLeaf(byte[32])void']
      returns: MimcMerkleContractReturns['addLeaf(byte[32])void']
    }>
    & Record<'isValidRoot(byte[32])bool' | 'isValidRoot', {
      argsObj: MimcMerkleContractArgs['obj']['isValidRoot(byte[32])bool']
      argsTuple: MimcMerkleContractArgs['tuple']['isValidRoot(byte[32])bool']
      returns: MimcMerkleContractReturns['isValidRoot(byte[32])bool']
    }>
    & Record<'addRoot(byte[32])void' | 'addRoot', {
      argsObj: MimcMerkleContractArgs['obj']['addRoot(byte[32])void']
      argsTuple: MimcMerkleContractArgs['tuple']['addRoot(byte[32])void']
      returns: MimcMerkleContractReturns['addRoot(byte[32])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        rootCounter: bigint
        treeIndex: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        rootCache: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
        subtree: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
        zeroHashes: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MimcMerkleContractSignatures = keyof MimcMerkleContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MimcMerkleContractNonVoidMethodSignatures = keyof MimcMerkleContractTypes['methods'] extends infer T ? T extends keyof MimcMerkleContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the MimcMerkleContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MimcMerkleContractSignatures> = MimcMerkleContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MimcMerkleContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MimcMerkleContractSignatures> = MimcMerkleContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MimcMerkleContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = MimcMerkleContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MimcMerkleContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MimcMerkleContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MimcMerkleContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the MimcMerkleContract smart contract
 */
export abstract class MimcMerkleContractParamsFactory {
  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<MimcMerkleContractArgs['obj']['bootstrap()void'] | MimcMerkleContractArgs['tuple']['bootstrap()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addLeaf(byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLeaf(params: CallParams<MimcMerkleContractArgs['obj']['addLeaf(byte[32])void'] | MimcMerkleContractArgs['tuple']['addLeaf(byte[32])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLeaf(byte[32])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.leafHash],
    }
  }
  /**
   * Constructs a no op call for the isValidRoot(byte[32])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isValidRoot(params: CallParams<MimcMerkleContractArgs['obj']['isValidRoot(byte[32])bool'] | MimcMerkleContractArgs['tuple']['isValidRoot(byte[32])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isValidRoot(byte[32])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.root],
    }
  }
  /**
   * Constructs a no op call for the addRoot(byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addRoot(params: CallParams<MimcMerkleContractArgs['obj']['addRoot(byte[32])void'] | MimcMerkleContractArgs['tuple']['addRoot(byte[32])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addRoot(byte[32])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rootHash],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the MimcMerkleContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MimcMerkleContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MimcMerkleContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MimcMerkleContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MimcMerkleContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the MimcMerkleContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MimcMerkleContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new MimcMerkleContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MimcMerkleContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MimcMerkleContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MimcMerkleContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new MimcMerkleContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the MimcMerkleContract smart contract
 */
export class MimcMerkleContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MimcMerkleContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the MimcMerkleContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MimcMerkleContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MimcMerkleContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MimcMerkleContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MimcMerkleContractClient> {
    return new MimcMerkleContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MimcMerkleContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MimcMerkleContractClient> {
    return new MimcMerkleContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the MimcMerkleContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `bootstrap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<MimcMerkleContractArgs['obj']['bootstrap()void'] | MimcMerkleContractArgs['tuple']['bootstrap()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(MimcMerkleContractParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `addLeaf(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLeaf: (params: CallParams<MimcMerkleContractArgs['obj']['addLeaf(byte[32])void'] | MimcMerkleContractArgs['tuple']['addLeaf(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MimcMerkleContractParamsFactory.addLeaf(params))
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `isValidRoot(byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isValidRoot: (params: CallParams<MimcMerkleContractArgs['obj']['isValidRoot(byte[32])bool'] | MimcMerkleContractArgs['tuple']['isValidRoot(byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MimcMerkleContractParamsFactory.isValidRoot(params))
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `addRoot(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addRoot: (params: CallParams<MimcMerkleContractArgs['obj']['addRoot(byte[32])void'] | MimcMerkleContractArgs['tuple']['addRoot(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MimcMerkleContractParamsFactory.addRoot(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the MimcMerkleContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `bootstrap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<MimcMerkleContractArgs['obj']['bootstrap()void'] | MimcMerkleContractArgs['tuple']['bootstrap()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(MimcMerkleContractParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `addLeaf(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLeaf: (params: CallParams<MimcMerkleContractArgs['obj']['addLeaf(byte[32])void'] | MimcMerkleContractArgs['tuple']['addLeaf(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MimcMerkleContractParamsFactory.addLeaf(params))
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `isValidRoot(byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isValidRoot: (params: CallParams<MimcMerkleContractArgs['obj']['isValidRoot(byte[32])bool'] | MimcMerkleContractArgs['tuple']['isValidRoot(byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MimcMerkleContractParamsFactory.isValidRoot(params))
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `addRoot(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addRoot: (params: CallParams<MimcMerkleContractArgs['obj']['addRoot(byte[32])void'] | MimcMerkleContractArgs['tuple']['addRoot(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MimcMerkleContractParamsFactory.addRoot(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the MimcMerkleContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `bootstrap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<MimcMerkleContractArgs['obj']['bootstrap()void'] | MimcMerkleContractArgs['tuple']['bootstrap()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(MimcMerkleContractParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleContractReturns['bootstrap()void'])}
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `addLeaf(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLeaf: async (params: CallParams<MimcMerkleContractArgs['obj']['addLeaf(byte[32])void'] | MimcMerkleContractArgs['tuple']['addLeaf(byte[32])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MimcMerkleContractParamsFactory.addLeaf(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleContractReturns['addLeaf(byte[32])void'])}
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `isValidRoot(byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isValidRoot: async (params: CallParams<MimcMerkleContractArgs['obj']['isValidRoot(byte[32])bool'] | MimcMerkleContractArgs['tuple']['isValidRoot(byte[32])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MimcMerkleContractParamsFactory.isValidRoot(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleContractReturns['isValidRoot(byte[32])bool'])}
    },

    /**
     * Makes a call to the MimcMerkleContract smart contract using the `addRoot(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addRoot: async (params: CallParams<MimcMerkleContractArgs['obj']['addRoot(byte[32])void'] | MimcMerkleContractArgs['tuple']['addRoot(byte[32])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MimcMerkleContractParamsFactory.addRoot(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleContractReturns['addRoot(byte[32])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MimcMerkleContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current MimcMerkleContract app
   */
  state = {
    /**
     * Methods to access global state for the current MimcMerkleContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          rootCounter: result.rootCounter,
          treeIndex: result.treeIndex,
        }
      },
      /**
       * Get the current value of the rootCounter key in global state
       */
      rootCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rootCounter")) as bigint | undefined },
      /**
       * Get the current value of the treeIndex key in global state
       */
      treeIndex: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("treeIndex")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current MimcMerkleContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          rootCache: result.rootCache,
          subtree: result.subtree,
          zeroHashes: result.zeroHashes,
        }
      },
      /**
       * Get the current value of the rootCache key in box state
       */
      rootCache: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("rootCache")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get the current value of the subtree key in box state
       */
      subtree: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("subtree")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get the current value of the zeroHashes key in box state
       */
      zeroHashes: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("zeroHashes")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
    },
  }

  public newGroup(): MimcMerkleContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap()void method call against the MimcMerkleContract contract
       */
      bootstrap(params: CallParams<MimcMerkleContractArgs['obj']['bootstrap()void'] | MimcMerkleContractArgs['tuple']['bootstrap()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLeaf(byte[32])void method call against the MimcMerkleContract contract
       */
      addLeaf(params: CallParams<MimcMerkleContractArgs['obj']['addLeaf(byte[32])void'] | MimcMerkleContractArgs['tuple']['addLeaf(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLeaf(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a isValidRoot(byte[32])bool method call against the MimcMerkleContract contract
       */
      isValidRoot(params: CallParams<MimcMerkleContractArgs['obj']['isValidRoot(byte[32])bool'] | MimcMerkleContractArgs['tuple']['isValidRoot(byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isValidRoot(params)))
        resultMappers.push((v) => client.decodeReturnValue('isValidRoot(byte[32])bool', v))
        return this
      },
      /**
       * Add a addRoot(byte[32])void method call against the MimcMerkleContract contract
       */
      addRoot(params: CallParams<MimcMerkleContractArgs['obj']['addRoot(byte[32])void'] | MimcMerkleContractArgs['tuple']['addRoot(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addRoot(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the MimcMerkleContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MimcMerkleContractComposer
  }
}
export type MimcMerkleContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<MimcMerkleContractArgs['obj']['bootstrap()void'] | MimcMerkleContractArgs['tuple']['bootstrap()void']>): MimcMerkleContractComposer<[...TReturns, MimcMerkleContractReturns['bootstrap()void'] | undefined]>

  /**
   * Calls the addLeaf(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLeaf(params?: CallParams<MimcMerkleContractArgs['obj']['addLeaf(byte[32])void'] | MimcMerkleContractArgs['tuple']['addLeaf(byte[32])void']>): MimcMerkleContractComposer<[...TReturns, MimcMerkleContractReturns['addLeaf(byte[32])void'] | undefined]>

  /**
   * Calls the isValidRoot(byte[32])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isValidRoot(params?: CallParams<MimcMerkleContractArgs['obj']['isValidRoot(byte[32])bool'] | MimcMerkleContractArgs['tuple']['isValidRoot(byte[32])bool']>): MimcMerkleContractComposer<[...TReturns, MimcMerkleContractReturns['isValidRoot(byte[32])bool'] | undefined]>

  /**
   * Calls the addRoot(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRoot(params?: CallParams<MimcMerkleContractArgs['obj']['addRoot(byte[32])void'] | MimcMerkleContractArgs['tuple']['addRoot(byte[32])void']>): MimcMerkleContractComposer<[...TReturns, MimcMerkleContractReturns['addRoot(byte[32])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the MimcMerkleContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MimcMerkleContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MimcMerkleContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MimcMerkleContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MimcMerkleContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MimcMerkleContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MimcMerkleContractComposerResults<TReturns>>
}
export type MimcMerkleContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

