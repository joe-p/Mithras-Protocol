/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Mithras","structs":{},"methods":[{"name":"createApplication","args":[{"type":"address","name":"depositVerifier"},{"type":"address","name":"spendVerifier"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"bootstrapMerkleTree","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"deposit","args":[{"type":"appl","name":"signalsAndProofCall"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"spend","args":[{"type":"appl","name":"verifierCall"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"ensureBudget","args":[{"type":"uint64","name":"budget"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"depositVerifier":{"keyType":"AVMString","valueType":"address","key":"ZA=="},"spendVerifier":{"keyType":"AVMString","valueType":"address","key":"cw=="},"rootCounter":{"keyType":"AVMString","valueType":"AVMUint64","key":"Yw=="},"treeIndex":{"keyType":"AVMString","valueType":"AVMUint64","key":"aQ=="},"epochId":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZQ=="},"lastComputedRoot":{"keyType":"AVMString","valueType":"AVMBytes","key":"bHI="}},"local":{},"box":{"rootCache":{"keyType":"AVMString","valueType":"byte[32][50]","key":"cg=="},"subtree":{"keyType":"AVMString","valueType":"byte[32][32]","key":"dA=="},"zeroHashes":{"keyType":"AVMString","valueType":"byte[32][32]","key":"eg=="}}},"maps":{"global":{},"local":{},"box":{"epochBoxes":{"keyType":"uint64","valueType":"byte[32][32]","prefix":"ZQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[430,586,637,644],"errorMessage":"Box must have value"},{"pc":[456],"errorMessage":"Invalid UTXO root"},{"pc":[247],"errorMessage":"Length must be 32"},{"pc":[82,98,120,142,154],"errorMessage":"OnCompletion is not NoOp"},{"pc":[158],"errorMessage":"can only call when creating"},{"pc":[85,101,123,145],"errorMessage":"can only call when not creating"},{"pc":[373,401,518,532,538,562,622,626,755],"errorMessage":"check GlobalState exists"},{"pc":[280,303,313,355,448,607,683,690,725],"errorMessage":"index access is out of bounds"},{"pc":[567,672,765],"errorMessage":"invalid size"},{"pc":[533],"errorMessage":"nothing to seal"},{"pc":[111,133],"errorMessage":"transaction type is appl"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAFIAABBoCTAiYIAWkBcgFjAXQBZQJscgF6AwaBATEbQQAqggUEtMd9cQScer9mBCsJG5EEm3qlRQQjLu4QNhoAjgUASQA9ACcAEQABADEZFEQxGEQ2GgEXiAGEJEMxGRREMRhEMRYkCUk4ECUSRIgBEiRDMRkURDEYRDEWJAlJOBAlEkSIAOAkQzEZFEQxGESIAHQkQzEZFEQxGBRENhoBNhoCiABRJEOKAgCL/oEKCIsAMgwNQQApsSWyEIEFshknB7IeJweyH4v/jQIACwAEs0L/3DIAsgFC//UjsgFC/++JigIBi/8iC4ECCIv+TCJYSRUiEkSJigIAgAFki/5ngAFzi/9niYoAACEEI4j/mIGACK8ir1wAJIsBIgxBACGLAUkkCSILiwBJTwIiWElQ5gFLAiILTF2MACQIjAFC/9gqI2coI2cpgcAMuUgnBosASU4CvytLAb8nBCNngeAHIlgnBUxniYoBAIv/OAAjgAFkZUQSRIv/JMIaI4j/Y4gAZ4mKAQCL/zgAI4ABc2VEEkSL/yTCGkmBAoj/RUxJgQOI/z5MgQSI/zgpvkQjiwSBMgxBACWLBCILiwNMIliLAhJBAA0kRIsAiAAdiwGIABiJiwQkCIwEQv/TI0L/54oBAIv/I4j+wImKAQAjRwOAADIAgQILIQQII4j+qyMoZUxJTwJEgYCAgIAQDEAAXiMoZUREIycEZURJIgpLASIYTBYnBExQSYGACLlIIycFZURJFSISRE8CIgtMuyQIJwRMZygjZycGvkQrSwG/KiNnKbxIKYHADLlIgeAHIlgnBUsBZ4gAhSMoZUyMBUQjKGVEJAgoTGcrvkyMAkQnBr5MjANEI4wEi/+MAIsEIgxBAEqLBSQaQAAziwBJFSISRIsEIguLAksBSwNdjAKLA0wiWEyMAYsBTFDmAYwAiwUkkYwFiwQkCIwEQv+/iwQiC4sCTCJYjAGLAEL/2SuLAr8nBYsASU4CZ4gAAYmKAQAjKmVESYEyGIv/FSISRCILKUyL/7skCCpMZ4k=","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Mithras contract
 */
export type MithrasArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address)void': {
      depositVerifier: string
      spendVerifier: string
    }
    'bootstrapMerkleTree()void': Record<string, never>
    'deposit(appl)void': {
      signalsAndProofCall: AppMethodCallTransactionArgument
    }
    'spend(appl)void': {
      verifierCall: AppMethodCallTransactionArgument
    }
    'ensureBudget(uint64)void': {
      budget: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address)void': [depositVerifier: string, spendVerifier: string]
    'bootstrapMerkleTree()void': []
    'deposit(appl)void': [signalsAndProofCall: AppMethodCallTransactionArgument]
    'spend(appl)void': [verifierCall: AppMethodCallTransactionArgument]
    'ensureBudget(uint64)void': [budget: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type MithrasReturns = {
  'createApplication(address,address)void': void
  'bootstrapMerkleTree()void': void
  'deposit(appl)void': void
  'spend(appl)void': void
  'ensureBudget(uint64)void': void
}

/**
 * Defines the types of available calls and state of the Mithras smart contract.
 */
export type MithrasTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: MithrasArgs['obj']['createApplication(address,address)void']
      argsTuple: MithrasArgs['tuple']['createApplication(address,address)void']
      returns: MithrasReturns['createApplication(address,address)void']
    }>
    & Record<'bootstrapMerkleTree()void' | 'bootstrapMerkleTree', {
      argsObj: MithrasArgs['obj']['bootstrapMerkleTree()void']
      argsTuple: MithrasArgs['tuple']['bootstrapMerkleTree()void']
      returns: MithrasReturns['bootstrapMerkleTree()void']
    }>
    & Record<'deposit(appl)void' | 'deposit', {
      argsObj: MithrasArgs['obj']['deposit(appl)void']
      argsTuple: MithrasArgs['tuple']['deposit(appl)void']
      returns: MithrasReturns['deposit(appl)void']
    }>
    & Record<'spend(appl)void' | 'spend', {
      argsObj: MithrasArgs['obj']['spend(appl)void']
      argsTuple: MithrasArgs['tuple']['spend(appl)void']
      returns: MithrasReturns['spend(appl)void']
    }>
    & Record<'ensureBudget(uint64)void' | 'ensureBudget', {
      argsObj: MithrasArgs['obj']['ensureBudget(uint64)void']
      argsTuple: MithrasArgs['tuple']['ensureBudget(uint64)void']
      returns: MithrasReturns['ensureBudget(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        depositVerifier: string
        spendVerifier: string
        rootCounter: bigint
        treeIndex: bigint
        epochId: bigint
        lastComputedRoot: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {
        rootCache: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
        subtree: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
        zeroHashes: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
      }
      maps: {
        epochBoxes: Map<bigint | number, [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MithrasSignatures = keyof MithrasTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MithrasNonVoidMethodSignatures = keyof MithrasTypes['methods'] extends infer T ? T extends keyof MithrasTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Mithras smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MithrasSignatures> = MithrasTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Mithras smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MithrasSignatures> = MithrasTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MithrasTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = MithrasTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MithrasCreateCallParams =
  | Expand<CallParams<MithrasArgs['obj']['createApplication(address,address)void'] | MithrasArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MithrasArgs['obj']['createApplication(address,address)void'] | MithrasArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication(address,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MithrasDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MithrasCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Mithras smart contract
 */
export abstract class MithrasParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MithrasCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address)void':
            return MithrasParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Mithras smart contract using the createApplication(address,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MithrasArgs['obj']['createApplication(address,address)void'] | MithrasArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.depositVerifier, params.args.spendVerifier],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrapMerkleTree()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrapMerkleTree(params: CallParams<MithrasArgs['obj']['bootstrapMerkleTree()void'] | MithrasArgs['tuple']['bootstrapMerkleTree()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrapMerkleTree()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the deposit(appl)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deposit(params: CallParams<MithrasArgs['obj']['deposit(appl)void'] | MithrasArgs['tuple']['deposit(appl)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit(appl)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signalsAndProofCall],
    }
  }
  /**
   * Constructs a no op call for the spend(appl)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static spend(params: CallParams<MithrasArgs['obj']['spend(appl)void'] | MithrasArgs['tuple']['spend(appl)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'spend(appl)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.verifierCall],
    }
  }
  /**
   * Constructs a no op call for the ensureBudget(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static ensureBudget(params: CallParams<MithrasArgs['obj']['ensureBudget(uint64)void'] | MithrasArgs['tuple']['ensureBudget(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'ensureBudget(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.budget],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Mithras smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MithrasFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MithrasFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MithrasClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MithrasClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Mithras smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MithrasDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MithrasParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (MithrasCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new MithrasClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mithras smart contract using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MithrasArgs['obj']['createApplication(address,address)void'] | MithrasArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(MithrasParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mithras smart contract using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MithrasArgs['obj']['createApplication(address,address)void'] | MithrasArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(MithrasParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Mithras smart contract using an ABI method call using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MithrasArgs['obj']['createApplication(address,address)void'] | MithrasArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(MithrasParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | MithrasReturns['createApplication(address,address)void']) }, appClient: new MithrasClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Mithras smart contract
 */
export class MithrasClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MithrasClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Mithras app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MithrasClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MithrasNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MithrasClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MithrasClient> {
    return new MithrasClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MithrasClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MithrasClient> {
    return new MithrasClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Mithras smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Mithras smart contract using the `bootstrapMerkleTree()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrapMerkleTree: (params: CallParams<MithrasArgs['obj']['bootstrapMerkleTree()void'] | MithrasArgs['tuple']['bootstrapMerkleTree()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(MithrasParamsFactory.bootstrapMerkleTree(params))
    },

    /**
     * Makes a call to the Mithras smart contract using the `deposit(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deposit: (params: CallParams<MithrasArgs['obj']['deposit(appl)void'] | MithrasArgs['tuple']['deposit(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MithrasParamsFactory.deposit(params))
    },

    /**
     * Makes a call to the Mithras smart contract using the `spend(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    spend: (params: CallParams<MithrasArgs['obj']['spend(appl)void'] | MithrasArgs['tuple']['spend(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MithrasParamsFactory.spend(params))
    },

    /**
     * Makes a call to the Mithras smart contract using the `ensureBudget(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    ensureBudget: (params: CallParams<MithrasArgs['obj']['ensureBudget(uint64)void'] | MithrasArgs['tuple']['ensureBudget(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MithrasParamsFactory.ensureBudget(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Mithras smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Mithras smart contract using the `bootstrapMerkleTree()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrapMerkleTree: (params: CallParams<MithrasArgs['obj']['bootstrapMerkleTree()void'] | MithrasArgs['tuple']['bootstrapMerkleTree()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(MithrasParamsFactory.bootstrapMerkleTree(params))
    },

    /**
     * Makes a call to the Mithras smart contract using the `deposit(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deposit: (params: CallParams<MithrasArgs['obj']['deposit(appl)void'] | MithrasArgs['tuple']['deposit(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MithrasParamsFactory.deposit(params))
    },

    /**
     * Makes a call to the Mithras smart contract using the `spend(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    spend: (params: CallParams<MithrasArgs['obj']['spend(appl)void'] | MithrasArgs['tuple']['spend(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MithrasParamsFactory.spend(params))
    },

    /**
     * Makes a call to the Mithras smart contract using the `ensureBudget(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    ensureBudget: (params: CallParams<MithrasArgs['obj']['ensureBudget(uint64)void'] | MithrasArgs['tuple']['ensureBudget(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MithrasParamsFactory.ensureBudget(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Mithras smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Mithras smart contract using the `bootstrapMerkleTree()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrapMerkleTree: async (params: CallParams<MithrasArgs['obj']['bootstrapMerkleTree()void'] | MithrasArgs['tuple']['bootstrapMerkleTree()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(MithrasParamsFactory.bootstrapMerkleTree(params))
      return {...result, return: result.return as unknown as (undefined | MithrasReturns['bootstrapMerkleTree()void'])}
    },

    /**
     * Makes a call to the Mithras smart contract using the `deposit(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deposit: async (params: CallParams<MithrasArgs['obj']['deposit(appl)void'] | MithrasArgs['tuple']['deposit(appl)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MithrasParamsFactory.deposit(params))
      return {...result, return: result.return as unknown as (undefined | MithrasReturns['deposit(appl)void'])}
    },

    /**
     * Makes a call to the Mithras smart contract using the `spend(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    spend: async (params: CallParams<MithrasArgs['obj']['spend(appl)void'] | MithrasArgs['tuple']['spend(appl)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MithrasParamsFactory.spend(params))
      return {...result, return: result.return as unknown as (undefined | MithrasReturns['spend(appl)void'])}
    },

    /**
     * Makes a call to the Mithras smart contract using the `ensureBudget(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    ensureBudget: async (params: CallParams<MithrasArgs['obj']['ensureBudget(uint64)void'] | MithrasArgs['tuple']['ensureBudget(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MithrasParamsFactory.ensureBudget(params))
      return {...result, return: result.return as unknown as (undefined | MithrasReturns['ensureBudget(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MithrasClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Mithras app
   */
  state = {
    /**
     * Methods to access global state for the current Mithras app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          depositVerifier: result.depositVerifier,
          spendVerifier: result.spendVerifier,
          rootCounter: result.rootCounter,
          treeIndex: result.treeIndex,
          epochId: result.epochId,
          lastComputedRoot: new BinaryStateValue(result.lastComputedRoot),
        }
      },
      /**
       * Get the current value of the depositVerifier key in global state
       */
      depositVerifier: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("depositVerifier")) as string | undefined },
      /**
       * Get the current value of the spendVerifier key in global state
       */
      spendVerifier: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("spendVerifier")) as string | undefined },
      /**
       * Get the current value of the rootCounter key in global state
       */
      rootCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rootCounter")) as bigint | undefined },
      /**
       * Get the current value of the treeIndex key in global state
       */
      treeIndex: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("treeIndex")) as bigint | undefined },
      /**
       * Get the current value of the epochId key in global state
       */
      epochId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("epochId")) as bigint | undefined },
      /**
       * Get the current value of the lastComputedRoot key in global state
       */
      lastComputedRoot: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lastComputedRoot")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current Mithras app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          rootCache: result.rootCache,
          subtree: result.subtree,
          zeroHashes: result.zeroHashes,
        }
      },
      /**
       * Get the current value of the rootCache key in box state
       */
      rootCache: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("rootCache")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get the current value of the subtree key in box state
       */
      subtree: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("subtree")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get the current value of the zeroHashes key in box state
       */
      zeroHashes: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("zeroHashes")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get values from the epochBoxes map in box state
       */
      epochBoxes: {
        /**
         * Get all current values of the epochBoxes map in box state
         */
        getMap: async (): Promise<Map<bigint, [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]>> => { return (await this.appClient.state.box.getMap("epochBoxes")) as Map<bigint, [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]> },
        /**
         * Get a current value of the epochBoxes map by key from box state
         */
        value: async (key: bigint | number): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return await this.appClient.state.box.getMapValue("epochBoxes", key) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      },
    },
  }

  public newGroup(): MithrasComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrapMerkleTree()void method call against the Mithras contract
       */
      bootstrapMerkleTree(params: CallParams<MithrasArgs['obj']['bootstrapMerkleTree()void'] | MithrasArgs['tuple']['bootstrapMerkleTree()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrapMerkleTree(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deposit(appl)void method call against the Mithras contract
       */
      deposit(params: CallParams<MithrasArgs['obj']['deposit(appl)void'] | MithrasArgs['tuple']['deposit(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deposit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a spend(appl)void method call against the Mithras contract
       */
      spend(params: CallParams<MithrasArgs['obj']['spend(appl)void'] | MithrasArgs['tuple']['spend(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.spend(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a ensureBudget(uint64)void method call against the Mithras contract
       */
      ensureBudget(params: CallParams<MithrasArgs['obj']['ensureBudget(uint64)void'] | MithrasArgs['tuple']['ensureBudget(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.ensureBudget(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Mithras contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MithrasComposer
  }
}
export type MithrasComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrapMerkleTree()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrapMerkleTree(params?: CallParams<MithrasArgs['obj']['bootstrapMerkleTree()void'] | MithrasArgs['tuple']['bootstrapMerkleTree()void']>): MithrasComposer<[...TReturns, MithrasReturns['bootstrapMerkleTree()void'] | undefined]>

  /**
   * Calls the deposit(appl)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(params?: CallParams<MithrasArgs['obj']['deposit(appl)void'] | MithrasArgs['tuple']['deposit(appl)void']>): MithrasComposer<[...TReturns, MithrasReturns['deposit(appl)void'] | undefined]>

  /**
   * Calls the spend(appl)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  spend(params?: CallParams<MithrasArgs['obj']['spend(appl)void'] | MithrasArgs['tuple']['spend(appl)void']>): MithrasComposer<[...TReturns, MithrasReturns['spend(appl)void'] | undefined]>

  /**
   * Calls the ensureBudget(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ensureBudget(params?: CallParams<MithrasArgs['obj']['ensureBudget(uint64)void'] | MithrasArgs['tuple']['ensureBudget(uint64)void']>): MithrasComposer<[...TReturns, MithrasReturns['ensureBudget(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Mithras smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MithrasComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MithrasComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MithrasComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MithrasComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MithrasComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MithrasComposerResults<TReturns>>
}
export type MithrasComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

