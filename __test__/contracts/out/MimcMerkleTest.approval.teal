#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 0 1 35200
    bytecblock "i" "r" "e" "c" "t" "lr" "z" 0x151f7c75 0x068101
    // __test__/contracts/MimcMerkleTest.algo.ts:9-10
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleTest extends MimcMerkle {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0xb1774551 0x0856c0c4 0x50ab1145 0x9eb9f57b 0x931c4f71 0x60772180 // method "bootstrapTest()void", method "addLeafTest(byte[32])void", method "sealAndRotateTest()void", method "isValidRootTest(byte[32])bool", method "isValidSealedRootTest(uint64,byte[32])bool", method "addRootTest(byte[32])void"
    txna ApplicationArgs 0
    match main_bootstrapTest_route@3 main_addLeafTest_route@4 main_sealAndRotateTest_route@5 main_isValidRootTest_route@6 main_isValidSealedRootTest_route@7 main_addRootTest_route@8

main_after_if_else@15:
    err

main_addRootTest_route@8:
    // __test__/contracts/MimcMerkleTest.algo.ts:31
    // addRootTest(rootHash: bytes<32>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // __test__/contracts/MimcMerkleTest.algo.ts:9-10
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleTest extends MimcMerkle {
    txna ApplicationArgs 1
    // __test__/contracts/MimcMerkleTest.algo.ts:31
    // addRootTest(rootHash: bytes<32>) {
    callsub addRootTest
    intc_2 // 1
    return

main_isValidSealedRootTest_route@7:
    // __test__/contracts/MimcMerkleTest.algo.ts:27
    // isValidSealedRootTest(epochId: uint64, root: bytes<32>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // __test__/contracts/MimcMerkleTest.algo.ts:9-10
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleTest extends MimcMerkle {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // __test__/contracts/MimcMerkleTest.algo.ts:27
    // isValidSealedRootTest(epochId: uint64, root: bytes<32>) {
    callsub isValidSealedRootTest
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_isValidRootTest_route@6:
    // __test__/contracts/MimcMerkleTest.algo.ts:23
    // isValidRootTest(root: bytes<32>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // __test__/contracts/MimcMerkleTest.algo.ts:9-10
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleTest extends MimcMerkle {
    txna ApplicationArgs 1
    // __test__/contracts/MimcMerkleTest.algo.ts:23
    // isValidRootTest(root: bytes<32>) {
    callsub isValidRootTest
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_sealAndRotateTest_route@5:
    // __test__/contracts/MimcMerkleTest.algo.ts:19
    // sealAndRotateTest() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub sealAndRotateTest
    intc_2 // 1
    return

main_addLeafTest_route@4:
    // __test__/contracts/MimcMerkleTest.algo.ts:15
    // addLeafTest(leafHash: bytes<32>) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // __test__/contracts/MimcMerkleTest.algo.ts:9-10
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleTest extends MimcMerkle {
    txna ApplicationArgs 1
    // __test__/contracts/MimcMerkleTest.algo.ts:15
    // addLeafTest(leafHash: bytes<32>) {
    callsub addLeafTest
    intc_2 // 1
    return

main_bootstrapTest_route@3:
    // __test__/contracts/MimcMerkleTest.algo.ts:11
    // bootstrapTest() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub bootstrapTest
    intc_2 // 1
    return

main_bare_routing@11:
    // __test__/contracts/MimcMerkleTest.algo.ts:9-10
    // @contract({ avmVersion: 11 })
    // export class MimcMerkleTest extends MimcMerkle {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_2 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 8 // 0x068101
    itxn_field ApprovalProgram
    bytec 8 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_1 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_after_while@7:
    retsub


// __test__/contracts/MimcMerkleTest.algo.ts::MimcMerkleTest.bootstrapTest() -> void:
bootstrapTest:
    // __test__/contracts/MimcMerkleTest.algo.ts:11
    // bootstrapTest() {
    proto 0 0
    // contracts/mimc_merkle.algo.ts:46
    // ensureBudget(MIMC_OPCODE_COST);
    intc_3 // 35200
    intc_1 // 0
    callsub ensure_budget
    // contracts/mimc_merkle.algo.ts:47
    // const tree = new FixedArray<bytes<32>, typeof TREE_HEIGHT>();
    pushint 1024 // 1024
    bzero
    // contracts/mimc_merkle.algo.ts:49
    // tree[0] = op.bzero(32).toFixed({ length: 32 });
    intc_0 // 32
    bzero
    replace2 0 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:51
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    intc_2 // 1

bootstrapTest_while_top@2:
    // contracts/mimc_merkle.algo.ts:51
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    frame_dig 1
    intc_0 // 32
    <
    bz bootstrapTest_after_while@4
    // contracts/mimc_merkle.algo.ts:54
    // tree[i - 1].concat(tree[i - 1]),
    frame_dig 1
    dup
    intc_2 // 1
    -
    intc_0 // 32
    *
    frame_dig 0
    dup
    uncover 2
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    dup
    concat
    // contracts/mimc_merkle.algo.ts:52-55
    // tree[i] = op.mimc(
    //   op.MimcConfigurations.BLS12_381Mp111,
    //   tree[i - 1].concat(tree[i - 1]),
    // );
    mimc BLS12_381Mp111
    dig 2
    intc_0 // 32
    *
    swap
    replace3 // on error: index access is out of bounds
    frame_bury 0
    // contracts/mimc_merkle.algo.ts:51
    // for (let i: uint64 = 1; i < TREE_HEIGHT; i++) {
    intc_2 // 1
    +
    frame_bury 1
    b bootstrapTest_while_top@2

bootstrapTest_after_while@4:
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:58
    // this.rootCounter.value = 0;
    intc_1 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:59
    // this.treeIndex.value = 0;
    intc_1 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:60
    // this.rootCache.create();
    pushint 1600 // 1600
    box_create
    pop
    // contracts/mimc_merkle.algo.ts:35
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec 6 // "z"
    // contracts/mimc_merkle.algo.ts:61
    // this.zeroHashes.value = clone(tree);
    frame_dig 0
    dup
    cover 2
    box_put
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:62
    // this.subtree.value = clone(tree);
    dig 1
    box_put
    // contracts/mimc_merkle.algo.ts:38
    // epochId = GlobalState<uint64>({ key: "e" });
    bytec_2 // "e"
    // contracts/mimc_merkle.algo.ts:63
    // this.epochId.value = 0;
    intc_1 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:65
    // this.lastComputedRoot.value = tree[TREE_HEIGHT - 1];
    pushint 992 // 992
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:65
    // this.lastComputedRoot.value = tree[TREE_HEIGHT - 1];
    swap
    app_global_put
    retsub


// __test__/contracts/MimcMerkleTest.algo.ts::MimcMerkleTest.addLeafTest(leafHash: bytes) -> void:
addLeafTest:
    // __test__/contracts/MimcMerkleTest.algo.ts:15
    // addLeafTest(leafHash: bytes<32>) {
    proto 1 0
    intc_1 // 0
    dupn 3
    pushbytes ""
    // contracts/mimc_merkle.algo.ts:70
    // ensureBudget(MIMC_OPCODE_COST + Global.minTxnFee * 2);
    global MinTxnFee
    pushint 2 // 2
    *
    intc_3 // 35200
    +
    intc_1 // 0
    callsub ensure_budget
    // contracts/mimc_merkle.algo.ts:72
    // let index = this.treeIndex.value;
    intc_1 // 0
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:72
    // let index = this.treeIndex.value;
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check GlobalState exists
    // contracts/mimc_merkle.algo.ts:74
    // if (!(index < 2 ** TREE_HEIGHT)) {
    pushint 4294967296 // 4294967296
    <
    bnz addLeafTest_after_if_else@3
    // contracts/mimc_merkle.algo.ts:76
    // this.sealAndRotate();
    callsub sealAndRotate
    // contracts/mimc_merkle.algo.ts:78
    // index = this.treeIndex.value;
    intc_1 // 0
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:78
    // index = this.treeIndex.value;
    app_global_get_ex
    swap
    frame_bury 5
    assert // check GlobalState exists

addLeafTest_after_if_else@3:
    // contracts/mimc_merkle.algo.ts:81
    // this.treeIndex.value += 1;
    intc_1 // 0
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:81
    // this.treeIndex.value += 1;
    app_global_get_ex
    assert // check GlobalState exists
    intc_2 // 1
    +
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:81
    // this.treeIndex.value += 1;
    swap
    app_global_put
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:85
    // let subtree = clone(this.subtree.value);
    box_get
    swap
    frame_bury 2
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:35
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec 6 // "z"
    // contracts/mimc_merkle.algo.ts:86
    // const zeroHashes = clone(this.zeroHashes.value);
    box_get
    swap
    frame_bury 3
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:88
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    intc_1 // 0
    frame_bury 4
    frame_dig -1
    frame_bury 0

addLeafTest_while_top@4:
    // contracts/mimc_merkle.algo.ts:88
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    frame_dig 4
    intc_0 // 32
    <
    bz addLeafTest_after_while@9
    // contracts/mimc_merkle.algo.ts:89
    // if ((index & 1) === 0) {
    frame_dig 5
    intc_2 // 1
    &
    bnz addLeafTest_else_body@7
    // contracts/mimc_merkle.algo.ts:90
    // subtree[i] = currentHash;
    frame_dig 0
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    frame_dig 4
    intc_0 // 32
    *
    frame_dig 2
    dig 1
    dig 3
    replace3 // on error: index access is out of bounds
    frame_bury 2
    // contracts/mimc_merkle.algo.ts:92
    // right = zeroHashes[i];
    frame_dig 3
    swap
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    swap
    frame_bury 1

addLeafTest_after_if_else@8:
    // contracts/mimc_merkle.algo.ts:100
    // left.concat(right),
    frame_dig 1
    swap
    concat
    // contracts/mimc_merkle.algo.ts:98-101
    // currentHash = op.mimc(
    //   op.MimcConfigurations.BLS12_381Mp111,
    //   left.concat(right),
    // );
    mimc BLS12_381Mp111
    frame_bury 0
    // contracts/mimc_merkle.algo.ts:103
    // index >>= 1;
    frame_dig 5
    intc_2 // 1
    shr
    frame_bury 5
    // contracts/mimc_merkle.algo.ts:88
    // for (let i: uint64 = 0; i < TREE_HEIGHT; i++) {
    frame_dig 4
    intc_2 // 1
    +
    frame_bury 4
    b addLeafTest_while_top@4

addLeafTest_else_body@7:
    // contracts/mimc_merkle.algo.ts:94
    // left = subtree[i];
    frame_dig 4
    intc_0 // 32
    *
    frame_dig 2
    swap
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    frame_bury 1
    frame_dig 0
    b addLeafTest_after_if_else@8

addLeafTest_after_while@9:
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:106
    // this.subtree.value = clone(subtree);
    frame_dig 2
    box_put
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:107
    // this.lastComputedRoot.value = currentHash;
    frame_dig 0
    dup
    cover 2
    app_global_put
    // contracts/mimc_merkle.algo.ts:108
    // this.addRoot(currentHash);
    callsub addRoot
    retsub


// __test__/contracts/MimcMerkleTest.algo.ts::MimcMerkleTest.sealAndRotateTest() -> void:
sealAndRotateTest:
    // __test__/contracts/MimcMerkleTest.algo.ts:20
    // this.sealAndRotate();
    callsub sealAndRotate
    retsub


// __test__/contracts/MimcMerkleTest.algo.ts::MimcMerkleTest.isValidRootTest(root: bytes) -> uint64:
isValidRootTest:
    // __test__/contracts/MimcMerkleTest.algo.ts:23
    // isValidRootTest(root: bytes<32>) {
    proto 1 1
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:143
    // for (const validRoot of this.rootCache.value) {
    box_get
    assert // Box must have value
    intc_1 // 0

isValidRootTest_for_header@2:
    // contracts/mimc_merkle.algo.ts:143
    // for (const validRoot of this.rootCache.value) {
    frame_dig 1
    pushint 50 // 50
    <
    bz isValidRootTest_after_for@7
    frame_dig 1
    intc_0 // 32
    *
    frame_dig 0
    swap
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:144
    // if (root === validRoot) {
    frame_dig -1
    ==
    bz isValidRootTest_after_if_else@5
    // contracts/mimc_merkle.algo.ts:145
    // return true;
    intc_2 // 1

isValidRootTest_after_inlined_contracts/mimc_merkle.algo.ts::MimcMerkle.isValidRoot@8:
    // __test__/contracts/MimcMerkleTest.algo.ts:24
    // return this.isValidRoot(root);
    frame_bury 0
    retsub

isValidRootTest_after_if_else@5:
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b isValidRootTest_for_header@2

isValidRootTest_after_for@7:
    // contracts/mimc_merkle.algo.ts:149
    // return false;
    intc_1 // 0
    // __test__/contracts/MimcMerkleTest.algo.ts:24
    // return this.isValidRoot(root);
    b isValidRootTest_after_inlined_contracts/mimc_merkle.algo.ts::MimcMerkle.isValidRoot@8


// __test__/contracts/MimcMerkleTest.algo.ts::MimcMerkleTest.isValidSealedRootTest(epochId: uint64, root: bytes) -> uint64:
isValidSealedRootTest:
    // __test__/contracts/MimcMerkleTest.algo.ts:27
    // isValidSealedRootTest(epochId: uint64, root: bytes<32>) {
    proto 2 1
    // contracts/mimc_merkle.algo.ts:154
    // const epochBoxId: uint64 = epochId / EPOCHS_PER_BOX;
    frame_dig -2
    intc_0 // 32
    /
    // contracts/mimc_merkle.algo.ts:155
    // const index: uint64 = epochId % EPOCHS_PER_BOX;
    frame_dig -2
    intc_0 // 32
    %
    // contracts/mimc_merkle.algo.ts:156
    // return this.epochBoxes(epochBoxId).value[index] === root;
    swap
    itob
    // contracts/mimc_merkle.algo.ts:41-43
    // epochBoxes = BoxMap<uint64, FixedArray<bytes<32>, typeof EPOCHS_PER_BOX>>({
    //   keyPrefix: "e",
    // });
    bytec_2 // "e"
    swap
    concat
    // contracts/mimc_merkle.algo.ts:156
    // return this.epochBoxes(epochBoxId).value[index] === root;
    box_get
    assert // Box must have value
    swap
    intc_0 // 32
    *
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    frame_dig -1
    ==
    // __test__/contracts/MimcMerkleTest.algo.ts:28
    // return this.isValidSealedRoot(epochId, root);
    retsub


// __test__/contracts/MimcMerkleTest.algo.ts::MimcMerkleTest.addRootTest(rootHash: bytes) -> void:
addRootTest:
    // __test__/contracts/MimcMerkleTest.algo.ts:31
    // addRootTest(rootHash: bytes<32>) {
    proto 1 0
    // __test__/contracts/MimcMerkleTest.algo.ts:32
    // this.addRoot(rootHash);
    frame_dig -1
    callsub addRoot
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.sealAndRotate() -> void:
sealAndRotate:
    // contracts/mimc_merkle.algo.ts:114
    // assert(this.treeIndex.value > 0, "nothing to seal");
    intc_1 // 0
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:114
    // assert(this.treeIndex.value > 0, "nothing to seal");
    app_global_get_ex
    assert // check GlobalState exists
    assert // nothing to seal
    // contracts/mimc_merkle.algo.ts:116
    // const epoch = this.epochId.value;
    intc_1 // 0
    // contracts/mimc_merkle.algo.ts:38
    // epochId = GlobalState<uint64>({ key: "e" });
    bytec_2 // "e"
    // contracts/mimc_merkle.algo.ts:116
    // const epoch = this.epochId.value;
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/mimc_merkle.algo.ts:117
    // const epochBoxKey: uint64 = epoch / EPOCHS_PER_BOX;
    dup
    intc_0 // 32
    /
    // contracts/mimc_merkle.algo.ts:118
    // const index: uint64 = epoch % EPOCHS_PER_BOX;
    dig 1
    intc_0 // 32
    %
    // contracts/mimc_merkle.algo.ts:120
    // const epochBox = this.epochBoxes(epochBoxKey);
    swap
    itob
    // contracts/mimc_merkle.algo.ts:41-43
    // epochBoxes = BoxMap<uint64, FixedArray<bytes<32>, typeof EPOCHS_PER_BOX>>({
    //   keyPrefix: "e",
    // });
    bytec_2 // "e"
    swap
    concat
    // contracts/mimc_merkle.algo.ts:121
    // epochBox.create();
    dup
    pushint 1024 // 1024
    box_create
    pop
    // contracts/mimc_merkle.algo.ts:123
    // epochBox.value[index] = this.lastComputedRoot.value;
    intc_1 // 0
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:123
    // epochBox.value[index] = this.lastComputedRoot.value;
    app_global_get_ex
    assert // check GlobalState exists
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    uncover 2
    intc_0 // 32
    *
    swap
    box_replace
    // contracts/mimc_merkle.algo.ts:126
    // this.epochId.value = epoch + 1;
    intc_2 // 1
    +
    // contracts/mimc_merkle.algo.ts:38
    // epochId = GlobalState<uint64>({ key: "e" });
    bytec_2 // "e"
    // contracts/mimc_merkle.algo.ts:126
    // this.epochId.value = epoch + 1;
    swap
    app_global_put
    // contracts/mimc_merkle.algo.ts:33
    // treeIndex = GlobalState<uint64>({ key: "i" });
    bytec_0 // "i"
    // contracts/mimc_merkle.algo.ts:127
    // this.treeIndex.value = 0;
    intc_1 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:35
    // zeroHashes = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "z" });
    bytec 6 // "z"
    // contracts/mimc_merkle.algo.ts:128
    // const zeros = clone(this.zeroHashes.value);
    box_get
    assert // Box must have value
    // contracts/mimc_merkle.algo.ts:31
    // subtree = Box<FixedArray<bytes<32>, typeof TREE_HEIGHT>>({ key: "t" });
    bytec 4 // "t"
    // contracts/mimc_merkle.algo.ts:129
    // this.subtree.value = clone(zeros);
    dig 1
    box_put
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:132
    // this.rootCounter.value = 0;
    intc_1 // 0
    app_global_put
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:135
    // this.rootCache.delete();
    box_del
    pop
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:136
    // this.rootCache.create();
    pushint 1600 // 1600
    box_create
    pop
    // contracts/mimc_merkle.algo.ts:137
    // const emptyRoot = zeros[TREE_HEIGHT - 1];
    pushint 992 // 992
    intc_0 // 32
    extract3 // on error: index access is out of bounds
    // contracts/mimc_merkle.algo.ts:39
    // lastComputedRoot = GlobalState<bytes<32>>({ key: "lr" });
    bytec 5 // "lr"
    // contracts/mimc_merkle.algo.ts:138
    // this.lastComputedRoot.value = emptyRoot;
    dig 1
    app_global_put
    // contracts/mimc_merkle.algo.ts:139
    // this.addRoot(emptyRoot);
    callsub addRoot
    retsub


// contracts/mimc_merkle.algo.ts::MimcMerkle.addRoot(rootHash: bytes) -> void:
addRoot:
    // contracts/mimc_merkle.algo.ts:159
    // protected addRoot(rootHash: bytes<32>): void {
    proto 1 0
    // contracts/mimc_merkle.algo.ts:160
    // const index: uint64 = this.rootCounter.value % ROOT_CACHE_SIZE;
    intc_1 // 0
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:160
    // const index: uint64 = this.rootCounter.value % ROOT_CACHE_SIZE;
    app_global_get_ex
    assert // check GlobalState exists
    dup
    pushint 50 // 50
    %
    // contracts/mimc_merkle.algo.ts:161
    // this.rootCache.value[index] = rootHash;
    frame_dig -1
    len
    intc_0 // 32
    ==
    assert // invalid size
    intc_0 // 32
    *
    // contracts/mimc_merkle.algo.ts:27
    // rootCache = Box<FixedArray<bytes<32>, typeof ROOT_CACHE_SIZE>>({ key: "r" });
    bytec_1 // "r"
    // contracts/mimc_merkle.algo.ts:161
    // this.rootCache.value[index] = rootHash;
    swap
    frame_dig -1
    box_replace
    // contracts/mimc_merkle.algo.ts:163
    // this.rootCounter.value += 1;
    intc_2 // 1
    +
    // contracts/mimc_merkle.algo.ts:29
    // rootCounter = GlobalState<uint64>({ key: "c" });
    bytec_3 // "c"
    // contracts/mimc_merkle.algo.ts:163
    // this.rootCounter.value += 1;
    swap
    app_global_put
    retsub
