/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"MimcMerkleTest","structs":{},"methods":[{"name":"bootstrapTest","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addLeafTest","args":[{"type":"byte[32]","name":"leafHash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"sealAndRotateTest","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"isValidRootTest","args":[{"type":"byte[32]","name":"root"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"isValidSealedRootTest","args":[{"type":"uint64","name":"epochId"},{"type":"byte[32]","name":"root"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addRootTest","args":[{"type":"byte[32]","name":"rootHash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"rootCounter":{"keyType":"AVMString","valueType":"AVMUint64","key":"Yw=="},"treeIndex":{"keyType":"AVMString","valueType":"AVMUint64","key":"aQ=="},"epochId":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZQ=="},"lastComputedRoot":{"keyType":"AVMString","valueType":"AVMBytes","key":"bHI="}},"local":{},"box":{"rootCache":{"keyType":"AVMString","valueType":"byte[32][50]","key":"cg=="},"subtree":{"keyType":"AVMString","valueType":"byte[32][32]","key":"dA=="},"zeroHashes":{"keyType":"AVMString","valueType":"byte[32][32]","key":"eg=="}}},"maps":{"global":{},"local":{},"box":{"epochBoxes":{"keyType":"uint64","valueType":"byte[32][32]","prefix":"ZQ=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[429,436,551,610,683],"errorMessage":"Box must have value"},{"pc":[93,108,139,166,178,193],"errorMessage":"OnCompletion is not NoOp"},{"pc":[210],"errorMessage":"can only call when creating"},{"pc":[96,111,142,169,181,196],"errorMessage":"can only call when not creating"},{"pc":[393,413,417,632,637,660,721],"errorMessage":"check GlobalState exists"},{"pc":[286,309,319,361,475,482,517,569,615,705],"errorMessage":"index access is out of bounds"},{"pc":[464,665,731],"errorMessage":"invalid size"},{"pc":[633],"errorMessage":"nothing to seal"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMzIgMCAxIDM1MjAwCiAgICBieXRlY2Jsb2NrICJpIiAiciIgImUiICJjIiAidCIgImxyIiAieiIgMHgxNTFmN2M3NSAweDA2ODEwMQogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6OS0xMAogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBNaW1jTWVya2xlVGVzdCBleHRlbmRzIE1pbWNNZXJrbGUgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDExCiAgICBwdXNoYnl0ZXNzIDB4YjE3NzQ1NTEgMHgwODU2YzBjNCAweDUwYWIxMTQ1IDB4OWViOWY1N2IgMHg5MzFjNGY3MSAweDYwNzcyMTgwIC8vIG1ldGhvZCAiYm9vdHN0cmFwVGVzdCgpdm9pZCIsIG1ldGhvZCAiYWRkTGVhZlRlc3QoYnl0ZVszMl0pdm9pZCIsIG1ldGhvZCAic2VhbEFuZFJvdGF0ZVRlc3QoKXZvaWQiLCBtZXRob2QgImlzVmFsaWRSb290VGVzdChieXRlWzMyXSlib29sIiwgbWV0aG9kICJpc1ZhbGlkU2VhbGVkUm9vdFRlc3QodWludDY0LGJ5dGVbMzJdKWJvb2wiLCBtZXRob2QgImFkZFJvb3RUZXN0KGJ5dGVbMzJdKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2Jvb3RzdHJhcFRlc3Rfcm91dGVAMyBtYWluX2FkZExlYWZUZXN0X3JvdXRlQDQgbWFpbl9zZWFsQW5kUm90YXRlVGVzdF9yb3V0ZUA1IG1haW5faXNWYWxpZFJvb3RUZXN0X3JvdXRlQDYgbWFpbl9pc1ZhbGlkU2VhbGVkUm9vdFRlc3Rfcm91dGVANyBtYWluX2FkZFJvb3RUZXN0X3JvdXRlQDgKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxNToKICAgIGVycgoKbWFpbl9hZGRSb290VGVzdF9yb3V0ZUA4OgogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MzEKICAgIC8vIGFkZFJvb3RUZXN0KHJvb3RIYXNoOiBieXRlczwzMj4pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6OS0xMAogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBNaW1jTWVya2xlVGVzdCBleHRlbmRzIE1pbWNNZXJrbGUgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MzEKICAgIC8vIGFkZFJvb3RUZXN0KHJvb3RIYXNoOiBieXRlczwzMj4pIHsKICAgIGNhbGxzdWIgYWRkUm9vdFRlc3QKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5faXNWYWxpZFNlYWxlZFJvb3RUZXN0X3JvdXRlQDc6CiAgICAvLyBfX3Rlc3RfXy9jb250cmFjdHMvTWltY01lcmtsZVRlc3QuYWxnby50czoyNwogICAgLy8gaXNWYWxpZFNlYWxlZFJvb3RUZXN0KGVwb2NoSWQ6IHVpbnQ2NCwgcm9vdDogYnl0ZXM8MzI+KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjktMTAKICAgIC8vIEBjb250cmFjdCh7IGF2bVZlcnNpb246IDExIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgTWltY01lcmtsZVRlc3QgZXh0ZW5kcyBNaW1jTWVya2xlIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjI3CiAgICAvLyBpc1ZhbGlkU2VhbGVkUm9vdFRlc3QoZXBvY2hJZDogdWludDY0LCByb290OiBieXRlczwzMj4pIHsKICAgIGNhbGxzdWIgaXNWYWxpZFNlYWxlZFJvb3RUZXN0CiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlYyA3IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX2lzVmFsaWRSb290VGVzdF9yb3V0ZUA2OgogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MjMKICAgIC8vIGlzVmFsaWRSb290VGVzdChyb290OiBieXRlczwzMj4pIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6OS0xMAogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBNaW1jTWVya2xlVGVzdCBleHRlbmRzIE1pbWNNZXJrbGUgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MjMKICAgIC8vIGlzVmFsaWRSb290VGVzdChyb290OiBieXRlczwzMj4pIHsKICAgIGNhbGxzdWIgaXNWYWxpZFJvb3RUZXN0CiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18xIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlYyA3IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX3NlYWxBbmRSb3RhdGVUZXN0X3JvdXRlQDU6CiAgICAvLyBfX3Rlc3RfXy9jb250cmFjdHMvTWltY01lcmtsZVRlc3QuYWxnby50czoxOQogICAgLy8gc2VhbEFuZFJvdGF0ZVRlc3QoKSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgc2VhbEFuZFJvdGF0ZVRlc3QKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkTGVhZlRlc3Rfcm91dGVANDoKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjE1CiAgICAvLyBhZGRMZWFmVGVzdChsZWFmSGFzaDogYnl0ZXM8MzI+KSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjktMTAKICAgIC8vIEBjb250cmFjdCh7IGF2bVZlcnNpb246IDExIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgTWltY01lcmtsZVRlc3QgZXh0ZW5kcyBNaW1jTWVya2xlIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjE1CiAgICAvLyBhZGRMZWFmVGVzdChsZWFmSGFzaDogYnl0ZXM8MzI+KSB7CiAgICBjYWxsc3ViIGFkZExlYWZUZXN0CiAgICBpbnRjXzIgLy8gMQogICAgcmV0dXJuCgptYWluX2Jvb3RzdHJhcFRlc3Rfcm91dGVAMzoKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjExCiAgICAvLyBib290c3RyYXBUZXN0KCkgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGJvb3RzdHJhcFRlc3QKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDExOgogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6OS0xMAogICAgLy8gQGNvbnRyYWN0KHsgYXZtVmVyc2lvbjogMTEgfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBNaW1jTWVya2xlVGVzdCBleHRlbmRzIE1pbWNNZXJrbGUgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMiAvLyAxCiAgICByZXR1cm4KCgovLyBfcHV5YV9saWIudXRpbC5lbnN1cmVfYnVkZ2V0KHJlcXVpcmVkX2J1ZGdldDogdWludDY0LCBmZWVfc291cmNlOiB1aW50NjQpIC0+IHZvaWQ6CmVuc3VyZV9idWRnZXQ6CiAgICBwcm90byAyIDAKICAgIGZyYW1lX2RpZyAtMgogICAgcHVzaGludCAxMCAvLyAxMAogICAgKwoKZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMToKICAgIGZyYW1lX2RpZyAwCiAgICBnbG9iYWwgT3Bjb2RlQnVkZ2V0CiAgICA+CiAgICBieiBlbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDcKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBieXRlYyA4IC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQogICAgYnl0ZWMgOCAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQogICAgZnJhbWVfZGlnIC0xCiAgICBzd2l0Y2ggZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8wQDMgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8xQDQKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2OgogICAgaXR4bl9zdWJtaXQKICAgIGIgZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMQoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8xQDQ6CiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANgoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8wQDM6CiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDYKCmVuc3VyZV9idWRnZXRfYWZ0ZXJfd2hpbGVANzoKICAgIHJldHN1YgoKCi8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjpNaW1jTWVya2xlVGVzdC5ib290c3RyYXBUZXN0KCkgLT4gdm9pZDoKYm9vdHN0cmFwVGVzdDoKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjExCiAgICAvLyBib290c3RyYXBUZXN0KCkgewogICAgcHJvdG8gMCAwCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo0NgogICAgLy8gZW5zdXJlQnVkZ2V0KE1JTUNfT1BDT0RFX0NPU1QpOwogICAgaW50Y18zIC8vIDM1MjAwCiAgICBpbnRjXzEgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo0NwogICAgLy8gY29uc3QgdHJlZSA9IG5ldyBGaXhlZEFycmF5PGJ5dGVzPDMyPiwgdHlwZW9mIFRSRUVfSEVJR0hUPigpOwogICAgcHVzaGludCAxMDI0IC8vIDEwMjQKICAgIGJ6ZXJvCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo0OQogICAgLy8gdHJlZVswXSA9IG9wLmJ6ZXJvKDMyKS50b0ZpeGVkKHsgbGVuZ3RoOiAzMiB9KTsKICAgIGludGNfMCAvLyAzMgogICAgYnplcm8KICAgIHJlcGxhY2UyIDAgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo1MQogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMTsgaSA8IFRSRUVfSEVJR0hUOyBpKyspIHsKICAgIGludGNfMiAvLyAxCgpib290c3RyYXBUZXN0X3doaWxlX3RvcEAyOgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6NTEKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDE7IGkgPCBUUkVFX0hFSUdIVDsgaSsrKSB7CiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18wIC8vIDMyCiAgICA8CiAgICBieiBib290c3RyYXBUZXN0X2FmdGVyX3doaWxlQDQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjU0CiAgICAvLyB0cmVlW2kgLSAxXS5jb25jYXQodHJlZVtpIC0gMV0pLAogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgaW50Y18yIC8vIDEKICAgIC0KICAgIGludGNfMCAvLyAzMgogICAgKgogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBpbnRjXzAgLy8gMzIKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjUyLTU1CiAgICAvLyB0cmVlW2ldID0gb3AubWltYygKICAgIC8vICAgb3AuTWltY0NvbmZpZ3VyYXRpb25zLkJMUzEyXzM4MU1wMTExLAogICAgLy8gICB0cmVlW2kgLSAxXS5jb25jYXQodHJlZVtpIC0gMV0pLAogICAgLy8gKTsKICAgIG1pbWMgQkxTMTJfMzgxTXAxMTEKICAgIGRpZyAyCiAgICBpbnRjXzAgLy8gMzIKICAgICoKICAgIHN3YXAKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo1MQogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMTsgaSA8IFRSRUVfSEVJR0hUOyBpKyspIHsKICAgIGludGNfMiAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgYm9vdHN0cmFwVGVzdF93aGlsZV90b3BAMgoKYm9vdHN0cmFwVGVzdF9hZnRlcl93aGlsZUA0OgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MjkKICAgIC8vIHJvb3RDb3VudGVyID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogImMiIH0pOwogICAgYnl0ZWNfMyAvLyAiYyIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjU4CiAgICAvLyB0aGlzLnJvb3RDb3VudGVyLnZhbHVlID0gMDsKICAgIGludGNfMSAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzMKICAgIC8vIHRyZWVJbmRleCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICJpIiB9KTsKICAgIGJ5dGVjXzAgLy8gImkiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo1OQogICAgLy8gdGhpcy50cmVlSW5kZXgudmFsdWUgPSAwOwogICAgaW50Y18xIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoyNwogICAgLy8gcm9vdENhY2hlID0gQm94PEZpeGVkQXJyYXk8Ynl0ZXM8MzI+LCB0eXBlb2YgUk9PVF9DQUNIRV9TSVpFPj4oeyBrZXk6ICJyIiB9KTsKICAgIGJ5dGVjXzEgLy8gInIiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo2MAogICAgLy8gdGhpcy5yb290Q2FjaGUuY3JlYXRlKCk7CiAgICBwdXNoaW50IDE2MDAgLy8gMTYwMAogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozNQogICAgLy8gemVyb0hhc2hlcyA9IEJveDxGaXhlZEFycmF5PGJ5dGVzPDMyPiwgdHlwZW9mIFRSRUVfSEVJR0hUPj4oeyBrZXk6ICJ6IiB9KTsKICAgIGJ5dGVjIDYgLy8gInoiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo2MQogICAgLy8gdGhpcy56ZXJvSGFzaGVzLnZhbHVlID0gY2xvbmUodHJlZSk7CiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBib3hfcHV0CiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozMQogICAgLy8gc3VidHJlZSA9IEJveDxGaXhlZEFycmF5PGJ5dGVzPDMyPiwgdHlwZW9mIFRSRUVfSEVJR0hUPj4oeyBrZXk6ICJ0IiB9KTsKICAgIGJ5dGVjIDQgLy8gInQiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo2MgogICAgLy8gdGhpcy5zdWJ0cmVlLnZhbHVlID0gY2xvbmUodHJlZSk7CiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzgKICAgIC8vIGVwb2NoSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAiZSIgfSk7CiAgICBieXRlY18yIC8vICJlIgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6NjMKICAgIC8vIHRoaXMuZXBvY2hJZC52YWx1ZSA9IDA7CiAgICBpbnRjXzEgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjY1CiAgICAvLyB0aGlzLmxhc3RDb21wdXRlZFJvb3QudmFsdWUgPSB0cmVlW1RSRUVfSEVJR0hUIC0gMV07CiAgICBwdXNoaW50IDk5MiAvLyA5OTIKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozOQogICAgLy8gbGFzdENvbXB1dGVkUm9vdCA9IEdsb2JhbFN0YXRlPGJ5dGVzPDMyPj4oeyBrZXk6ICJsciIgfSk7CiAgICBieXRlYyA1IC8vICJsciIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjY1CiAgICAvLyB0aGlzLmxhc3RDb21wdXRlZFJvb3QudmFsdWUgPSB0cmVlW1RSRUVfSEVJR0hUIC0gMV07CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6Ok1pbWNNZXJrbGVUZXN0LmFkZExlYWZUZXN0KGxlYWZIYXNoOiBieXRlcykgLT4gdm9pZDoKYWRkTGVhZlRlc3Q6CiAgICAvLyBfX3Rlc3RfXy9jb250cmFjdHMvTWltY01lcmtsZVRlc3QuYWxnby50czoxNQogICAgLy8gYWRkTGVhZlRlc3QobGVhZkhhc2g6IGJ5dGVzPDMyPikgewogICAgcHJvdG8gMSAwCiAgICBpbnRjXzEgLy8gMAogICAgZHVwbiAzCiAgICBwdXNoYnl0ZXMgIiIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjcwCiAgICAvLyBlbnN1cmVCdWRnZXQoTUlNQ19PUENPREVfQ09TVCArIEdsb2JhbC5taW5UeG5GZWUgKiAyKTsKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAqCiAgICBpbnRjXzMgLy8gMzUyMDAKICAgICsKICAgIGludGNfMSAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjcyCiAgICAvLyBsZXQgaW5kZXggPSB0aGlzLnRyZWVJbmRleC52YWx1ZTsKICAgIGludGNfMSAvLyAwCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozMwogICAgLy8gdHJlZUluZGV4ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogImkiIH0pOwogICAgYnl0ZWNfMCAvLyAiaSIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjcyCiAgICAvLyBsZXQgaW5kZXggPSB0aGlzLnRyZWVJbmRleC52YWx1ZTsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6NzQKICAgIC8vIGlmICghKGluZGV4IDwgMiAqKiBUUkVFX0hFSUdIVCkpIHsKICAgIHB1c2hpbnQgNDI5NDk2NzI5NiAvLyA0Mjk0OTY3Mjk2CiAgICA8CiAgICBibnogYWRkTGVhZlRlc3RfYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo3NgogICAgLy8gdGhpcy5zZWFsQW5kUm90YXRlKCk7CiAgICBjYWxsc3ViIHNlYWxBbmRSb3RhdGUKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjc4CiAgICAvLyBpbmRleCA9IHRoaXMudHJlZUluZGV4LnZhbHVlOwogICAgaW50Y18xIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjMzCiAgICAvLyB0cmVlSW5kZXggPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAiaSIgfSk7CiAgICBieXRlY18wIC8vICJpIgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6NzgKICAgIC8vIGluZGV4ID0gdGhpcy50cmVlSW5kZXgudmFsdWU7CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgc3dhcAogICAgZnJhbWVfYnVyeSA1CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCgphZGRMZWFmVGVzdF9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo4MQogICAgLy8gdGhpcy50cmVlSW5kZXgudmFsdWUgKz0gMTsKICAgIGludGNfMSAvLyAwCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozMwogICAgLy8gdHJlZUluZGV4ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogImkiIH0pOwogICAgYnl0ZWNfMCAvLyAiaSIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjgxCiAgICAvLyB0aGlzLnRyZWVJbmRleC52YWx1ZSArPSAxOwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMiAvLyAxCiAgICArCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozMwogICAgLy8gdHJlZUluZGV4ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogImkiIH0pOwogICAgYnl0ZWNfMCAvLyAiaSIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjgxCiAgICAvLyB0aGlzLnRyZWVJbmRleC52YWx1ZSArPSAxOwogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjMxCiAgICAvLyBzdWJ0cmVlID0gQm94PEZpeGVkQXJyYXk8Ynl0ZXM8MzI+LCB0eXBlb2YgVFJFRV9IRUlHSFQ+Pih7IGtleTogInQiIH0pOwogICAgYnl0ZWMgNCAvLyAidCIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjg1CiAgICAvLyBsZXQgc3VidHJlZSA9IGNsb25lKHRoaXMuc3VidHJlZS52YWx1ZSk7CiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDIKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozNQogICAgLy8gemVyb0hhc2hlcyA9IEJveDxGaXhlZEFycmF5PGJ5dGVzPDMyPiwgdHlwZW9mIFRSRUVfSEVJR0hUPj4oeyBrZXk6ICJ6IiB9KTsKICAgIGJ5dGVjIDYgLy8gInoiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo4NgogICAgLy8gY29uc3QgemVyb0hhc2hlcyA9IGNsb25lKHRoaXMuemVyb0hhc2hlcy52YWx1ZSk7CiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDMKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo4OAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IFRSRUVfSEVJR0hUOyBpKyspIHsKICAgIGludGNfMSAvLyAwCiAgICBmcmFtZV9idXJ5IDQKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfYnVyeSAwCgphZGRMZWFmVGVzdF93aGlsZV90b3BANDoKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjg4CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgVFJFRV9IRUlHSFQ7IGkrKykgewogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMCAvLyAzMgogICAgPAogICAgYnogYWRkTGVhZlRlc3RfYWZ0ZXJfd2hpbGVAOQogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6ODkKICAgIC8vIGlmICgoaW5kZXggJiAxKSA9PT0gMCkgewogICAgZnJhbWVfZGlnIDUKICAgIGludGNfMiAvLyAxCiAgICAmCiAgICBibnogYWRkTGVhZlRlc3RfZWxzZV9ib2R5QDcKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjkwCiAgICAvLyBzdWJ0cmVlW2ldID0gY3VycmVudEhhc2g7CiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIGZyYW1lX2RpZyA0CiAgICBpbnRjXzAgLy8gMzIKICAgICoKICAgIGZyYW1lX2RpZyAyCiAgICBkaWcgMQogICAgZGlnIDMKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo5MgogICAgLy8gcmlnaHQgPSB6ZXJvSGFzaGVzW2ldOwogICAgZnJhbWVfZGlnIDMKICAgIHN3YXAKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDEKCmFkZExlYWZUZXN0X2FmdGVyX2lmX2Vsc2VAODoKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEwMAogICAgLy8gbGVmdC5jb25jYXQocmlnaHQpLAogICAgZnJhbWVfZGlnIDEKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6OTgtMTAxCiAgICAvLyBjdXJyZW50SGFzaCA9IG9wLm1pbWMoCiAgICAvLyAgIG9wLk1pbWNDb25maWd1cmF0aW9ucy5CTFMxMl8zODFNcDExMSwKICAgIC8vICAgbGVmdC5jb25jYXQocmlnaHQpLAogICAgLy8gKTsKICAgIG1pbWMgQkxTMTJfMzgxTXAxMTEKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTAzCiAgICAvLyBpbmRleCA+Pj0gMTsKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzIgLy8gMQogICAgc2hyCiAgICBmcmFtZV9idXJ5IDUKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjg4CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgVFJFRV9IRUlHSFQ7IGkrKykgewogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMiAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDQKICAgIGIgYWRkTGVhZlRlc3Rfd2hpbGVfdG9wQDQKCmFkZExlYWZUZXN0X2Vsc2VfYm9keUA3OgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6OTQKICAgIC8vIGxlZnQgPSBzdWJ0cmVlW2ldOwogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMCAvLyAzMgogICAgKgogICAgZnJhbWVfZGlnIDIKICAgIHN3YXAKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2RpZyAwCiAgICBiIGFkZExlYWZUZXN0X2FmdGVyX2lmX2Vsc2VAOAoKYWRkTGVhZlRlc3RfYWZ0ZXJfd2hpbGVAOToKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjMxCiAgICAvLyBzdWJ0cmVlID0gQm94PEZpeGVkQXJyYXk8Ynl0ZXM8MzI+LCB0eXBlb2YgVFJFRV9IRUlHSFQ+Pih7IGtleTogInQiIH0pOwogICAgYnl0ZWMgNCAvLyAidCIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEwNgogICAgLy8gdGhpcy5zdWJ0cmVlLnZhbHVlID0gY2xvbmUoc3VidHJlZSk7CiAgICBmcmFtZV9kaWcgMgogICAgYm94X3B1dAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzkKICAgIC8vIGxhc3RDb21wdXRlZFJvb3QgPSBHbG9iYWxTdGF0ZTxieXRlczwzMj4+KHsga2V5OiAibHIiIH0pOwogICAgYnl0ZWMgNSAvLyAibHIiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxMDcKICAgIC8vIHRoaXMubGFzdENvbXB1dGVkUm9vdC52YWx1ZSA9IGN1cnJlbnRIYXNoOwogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgY292ZXIgMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEwOAogICAgLy8gdGhpcy5hZGRSb290KGN1cnJlbnRIYXNoKTsKICAgIGNhbGxzdWIgYWRkUm9vdAogICAgcmV0c3ViCgoKLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6Ok1pbWNNZXJrbGVUZXN0LnNlYWxBbmRSb3RhdGVUZXN0KCkgLT4gdm9pZDoKc2VhbEFuZFJvdGF0ZVRlc3Q6CiAgICAvLyBfX3Rlc3RfXy9jb250cmFjdHMvTWltY01lcmtsZVRlc3QuYWxnby50czoyMAogICAgLy8gdGhpcy5zZWFsQW5kUm90YXRlKCk7CiAgICBjYWxsc3ViIHNlYWxBbmRSb3RhdGUKICAgIHJldHN1YgoKCi8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjpNaW1jTWVya2xlVGVzdC5pc1ZhbGlkUm9vdFRlc3Qocm9vdDogYnl0ZXMpIC0+IHVpbnQ2NDoKaXNWYWxpZFJvb3RUZXN0OgogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MjMKICAgIC8vIGlzVmFsaWRSb290VGVzdChyb290OiBieXRlczwzMj4pIHsKICAgIHByb3RvIDEgMQogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MjcKICAgIC8vIHJvb3RDYWNoZSA9IEJveDxGaXhlZEFycmF5PGJ5dGVzPDMyPiwgdHlwZW9mIFJPT1RfQ0FDSEVfU0laRT4+KHsga2V5OiAiciIgfSk7CiAgICBieXRlY18xIC8vICJyIgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTQzCiAgICAvLyBmb3IgKGNvbnN0IHZhbGlkUm9vdCBvZiB0aGlzLnJvb3RDYWNoZS52YWx1ZSkgewogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGludGNfMSAvLyAwCgppc1ZhbGlkUm9vdFRlc3RfZm9yX2hlYWRlckAyOgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTQzCiAgICAvLyBmb3IgKGNvbnN0IHZhbGlkUm9vdCBvZiB0aGlzLnJvb3RDYWNoZS52YWx1ZSkgewogICAgZnJhbWVfZGlnIDEKICAgIHB1c2hpbnQgNTAgLy8gNTAKICAgIDwKICAgIGJ6IGlzVmFsaWRSb290VGVzdF9hZnRlcl9mb3JANwogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMCAvLyAzMgogICAgKgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxNDQKICAgIC8vIGlmIChyb290ID09PSB2YWxpZFJvb3QpIHsKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGJ6IGlzVmFsaWRSb290VGVzdF9hZnRlcl9pZl9lbHNlQDUKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjE0NQogICAgLy8gcmV0dXJuIHRydWU7CiAgICBpbnRjXzIgLy8gMQoKaXNWYWxpZFJvb3RUZXN0X2FmdGVyX2lubGluZWRfY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6Ok1pbWNNZXJrbGUuaXNWYWxpZFJvb3RAODoKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjI0CiAgICAvLyByZXR1cm4gdGhpcy5pc1ZhbGlkUm9vdChyb290KTsKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgppc1ZhbGlkUm9vdFRlc3RfYWZ0ZXJfaWZfZWxzZUA1OgogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMiAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgaXNWYWxpZFJvb3RUZXN0X2Zvcl9oZWFkZXJAMgoKaXNWYWxpZFJvb3RUZXN0X2FmdGVyX2ZvckA3OgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTQ5CiAgICAvLyByZXR1cm4gZmFsc2U7CiAgICBpbnRjXzEgLy8gMAogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MjQKICAgIC8vIHJldHVybiB0aGlzLmlzVmFsaWRSb290KHJvb3QpOwogICAgYiBpc1ZhbGlkUm9vdFRlc3RfYWZ0ZXJfaW5saW5lZF9jb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo6TWltY01lcmtsZS5pc1ZhbGlkUm9vdEA4CgoKLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6Ok1pbWNNZXJrbGVUZXN0LmlzVmFsaWRTZWFsZWRSb290VGVzdChlcG9jaElkOiB1aW50NjQsIHJvb3Q6IGJ5dGVzKSAtPiB1aW50NjQ6CmlzVmFsaWRTZWFsZWRSb290VGVzdDoKICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjI3CiAgICAvLyBpc1ZhbGlkU2VhbGVkUm9vdFRlc3QoZXBvY2hJZDogdWludDY0LCByb290OiBieXRlczwzMj4pIHsKICAgIHByb3RvIDIgMQogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTU0CiAgICAvLyBjb25zdCBlcG9jaEJveElkOiB1aW50NjQgPSBlcG9jaElkIC8gRVBPQ0hTX1BFUl9CT1g7CiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAzMgogICAgLwogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTU1CiAgICAvLyBjb25zdCBpbmRleDogdWludDY0ID0gZXBvY2hJZCAlIEVQT0NIU19QRVJfQk9YOwogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzAgLy8gMzIKICAgICUKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjE1NgogICAgLy8gcmV0dXJuIHRoaXMuZXBvY2hCb3hlcyhlcG9jaEJveElkKS52YWx1ZVtpbmRleF0gPT09IHJvb3Q7CiAgICBzd2FwCiAgICBpdG9iCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo0MS00MwogICAgLy8gZXBvY2hCb3hlcyA9IEJveE1hcDx1aW50NjQsIEZpeGVkQXJyYXk8Ynl0ZXM8MzI+LCB0eXBlb2YgRVBPQ0hTX1BFUl9CT1g+Pih7CiAgICAvLyAgIGtleVByZWZpeDogImUiLAogICAgLy8gfSk7CiAgICBieXRlY18yIC8vICJlIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxNTYKICAgIC8vIHJldHVybiB0aGlzLmVwb2NoQm94ZXMoZXBvY2hCb3hJZCkudmFsdWVbaW5kZXhdID09PSByb290OwogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIGludGNfMCAvLyAzMgogICAgKgogICAgaW50Y18wIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIC8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjI4CiAgICAvLyByZXR1cm4gdGhpcy5pc1ZhbGlkU2VhbGVkUm9vdChlcG9jaElkLCByb290KTsKICAgIHJldHN1YgoKCi8vIF9fdGVzdF9fL2NvbnRyYWN0cy9NaW1jTWVya2xlVGVzdC5hbGdvLnRzOjpNaW1jTWVya2xlVGVzdC5hZGRSb290VGVzdChyb290SGFzaDogYnl0ZXMpIC0+IHZvaWQ6CmFkZFJvb3RUZXN0OgogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MzEKICAgIC8vIGFkZFJvb3RUZXN0KHJvb3RIYXNoOiBieXRlczwzMj4pIHsKICAgIHByb3RvIDEgMAogICAgLy8gX190ZXN0X18vY29udHJhY3RzL01pbWNNZXJrbGVUZXN0LmFsZ28udHM6MzIKICAgIC8vIHRoaXMuYWRkUm9vdChyb290SGFzaCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgYWRkUm9vdAogICAgcmV0c3ViCgoKLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6Ok1pbWNNZXJrbGUuc2VhbEFuZFJvdGF0ZSgpIC0+IHZvaWQ6CnNlYWxBbmRSb3RhdGU6CiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxMTQKICAgIC8vIGFzc2VydCh0aGlzLnRyZWVJbmRleC52YWx1ZSA+IDAsICJub3RoaW5nIHRvIHNlYWwiKTsKICAgIGludGNfMSAvLyAwCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozMwogICAgLy8gdHJlZUluZGV4ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogImkiIH0pOwogICAgYnl0ZWNfMCAvLyAiaSIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjExNAogICAgLy8gYXNzZXJ0KHRoaXMudHJlZUluZGV4LnZhbHVlID4gMCwgIm5vdGhpbmcgdG8gc2VhbCIpOwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGFzc2VydCAvLyBub3RoaW5nIHRvIHNlYWwKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjExNgogICAgLy8gY29uc3QgZXBvY2ggPSB0aGlzLmVwb2NoSWQudmFsdWU7CiAgICBpbnRjXzEgLy8gMAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzgKICAgIC8vIGVwb2NoSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAiZSIgfSk7CiAgICBieXRlY18yIC8vICJlIgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTE2CiAgICAvLyBjb25zdCBlcG9jaCA9IHRoaXMuZXBvY2hJZC52YWx1ZTsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxMTcKICAgIC8vIGNvbnN0IGVwb2NoQm94S2V5OiB1aW50NjQgPSBlcG9jaCAvIEVQT0NIU19QRVJfQk9YOwogICAgZHVwCiAgICBpbnRjXzAgLy8gMzIKICAgIC8KICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjExOAogICAgLy8gY29uc3QgaW5kZXg6IHVpbnQ2NCA9IGVwb2NoICUgRVBPQ0hTX1BFUl9CT1g7CiAgICBkaWcgMQogICAgaW50Y18wIC8vIDMyCiAgICAlCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxMjAKICAgIC8vIGNvbnN0IGVwb2NoQm94ID0gdGhpcy5lcG9jaEJveGVzKGVwb2NoQm94S2V5KTsKICAgIHN3YXAKICAgIGl0b2IKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjQxLTQzCiAgICAvLyBlcG9jaEJveGVzID0gQm94TWFwPHVpbnQ2NCwgRml4ZWRBcnJheTxieXRlczwzMj4sIHR5cGVvZiBFUE9DSFNfUEVSX0JPWD4+KHsKICAgIC8vICAga2V5UHJlZml4OiAiZSIsCiAgICAvLyB9KTsKICAgIGJ5dGVjXzIgLy8gImUiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEyMQogICAgLy8gZXBvY2hCb3guY3JlYXRlKCk7CiAgICBkdXAKICAgIHB1c2hpbnQgMTAyNCAvLyAxMDI0CiAgICBib3hfY3JlYXRlCiAgICBwb3AKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEyMwogICAgLy8gZXBvY2hCb3gudmFsdWVbaW5kZXhdID0gdGhpcy5sYXN0Q29tcHV0ZWRSb290LnZhbHVlOwogICAgaW50Y18xIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjM5CiAgICAvLyBsYXN0Q29tcHV0ZWRSb290ID0gR2xvYmFsU3RhdGU8Ynl0ZXM8MzI+Pih7IGtleTogImxyIiB9KTsKICAgIGJ5dGVjIDUgLy8gImxyIgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTIzCiAgICAvLyBlcG9jaEJveC52YWx1ZVtpbmRleF0gPSB0aGlzLmxhc3RDb21wdXRlZFJvb3QudmFsdWU7CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMCAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIHVuY292ZXIgMgogICAgaW50Y18wIC8vIDMyCiAgICAqCiAgICBzd2FwCiAgICBib3hfcmVwbGFjZQogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTI2CiAgICAvLyB0aGlzLmVwb2NoSWQudmFsdWUgPSBlcG9jaCArIDE7CiAgICBpbnRjXzIgLy8gMQogICAgKwogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzgKICAgIC8vIGVwb2NoSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAiZSIgfSk7CiAgICBieXRlY18yIC8vICJlIgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTI2CiAgICAvLyB0aGlzLmVwb2NoSWQudmFsdWUgPSBlcG9jaCArIDE7CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzMKICAgIC8vIHRyZWVJbmRleCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICJpIiB9KTsKICAgIGJ5dGVjXzAgLy8gImkiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxMjcKICAgIC8vIHRoaXMudHJlZUluZGV4LnZhbHVlID0gMDsKICAgIGludGNfMSAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzUKICAgIC8vIHplcm9IYXNoZXMgPSBCb3g8Rml4ZWRBcnJheTxieXRlczwzMj4sIHR5cGVvZiBUUkVFX0hFSUdIVD4+KHsga2V5OiAieiIgfSk7CiAgICBieXRlYyA2IC8vICJ6IgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTI4CiAgICAvLyBjb25zdCB6ZXJvcyA9IGNsb25lKHRoaXMuemVyb0hhc2hlcy52YWx1ZSk7CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MzEKICAgIC8vIHN1YnRyZWUgPSBCb3g8Rml4ZWRBcnJheTxieXRlczwzMj4sIHR5cGVvZiBUUkVFX0hFSUdIVD4+KHsga2V5OiAidCIgfSk7CiAgICBieXRlYyA0IC8vICJ0IgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTI5CiAgICAvLyB0aGlzLnN1YnRyZWUudmFsdWUgPSBjbG9uZSh6ZXJvcyk7CiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MjkKICAgIC8vIHJvb3RDb3VudGVyID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogImMiIH0pOwogICAgYnl0ZWNfMyAvLyAiYyIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEzMgogICAgLy8gdGhpcy5yb290Q291bnRlci52YWx1ZSA9IDA7CiAgICBpbnRjXzEgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjI3CiAgICAvLyByb290Q2FjaGUgPSBCb3g8Rml4ZWRBcnJheTxieXRlczwzMj4sIHR5cGVvZiBST09UX0NBQ0hFX1NJWkU+Pih7IGtleTogInIiIH0pOwogICAgYnl0ZWNfMSAvLyAiciIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEzNQogICAgLy8gdGhpcy5yb290Q2FjaGUuZGVsZXRlKCk7CiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjI3CiAgICAvLyByb290Q2FjaGUgPSBCb3g8Rml4ZWRBcnJheTxieXRlczwzMj4sIHR5cGVvZiBST09UX0NBQ0hFX1NJWkU+Pih7IGtleTogInIiIH0pOwogICAgYnl0ZWNfMSAvLyAiciIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEzNgogICAgLy8gdGhpcy5yb290Q2FjaGUuY3JlYXRlKCk7CiAgICBwdXNoaW50IDE2MDAgLy8gMTYwMAogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxMzcKICAgIC8vIGNvbnN0IGVtcHR5Um9vdCA9IHplcm9zW1RSRUVfSEVJR0hUIC0gMV07CiAgICBwdXNoaW50IDk5MiAvLyA5OTIKICAgIGludGNfMCAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czozOQogICAgLy8gbGFzdENvbXB1dGVkUm9vdCA9IEdsb2JhbFN0YXRlPGJ5dGVzPDMyPj4oeyBrZXk6ICJsciIgfSk7CiAgICBieXRlYyA1IC8vICJsciIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjEzOAogICAgLy8gdGhpcy5sYXN0Q29tcHV0ZWRSb290LnZhbHVlID0gZW1wdHlSb290OwogICAgZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxMzkKICAgIC8vIHRoaXMuYWRkUm9vdChlbXB0eVJvb3QpOwogICAgY2FsbHN1YiBhZGRSb290CiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czo6TWltY01lcmtsZS5hZGRSb290KHJvb3RIYXNoOiBieXRlcykgLT4gdm9pZDoKYWRkUm9vdDoKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjE1OQogICAgLy8gcHJvdGVjdGVkIGFkZFJvb3Qocm9vdEhhc2g6IGJ5dGVzPDMyPik6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxNjAKICAgIC8vIGNvbnN0IGluZGV4OiB1aW50NjQgPSB0aGlzLnJvb3RDb3VudGVyLnZhbHVlICUgUk9PVF9DQUNIRV9TSVpFOwogICAgaW50Y18xIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjI5CiAgICAvLyByb290Q291bnRlciA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICJjIiB9KTsKICAgIGJ5dGVjXzMgLy8gImMiCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxNjAKICAgIC8vIGNvbnN0IGluZGV4OiB1aW50NjQgPSB0aGlzLnJvb3RDb3VudGVyLnZhbHVlICUgUk9PVF9DQUNIRV9TSVpFOwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGR1cAogICAgcHVzaGludCA1MCAvLyA1MAogICAgJQogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTYxCiAgICAvLyB0aGlzLnJvb3RDYWNoZS52YWx1ZVtpbmRleF0gPSByb290SGFzaDsKICAgIGZyYW1lX2RpZyAtMQogICAgbGVuCiAgICBpbnRjXzAgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICBpbnRjXzAgLy8gMzIKICAgICoKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjI3CiAgICAvLyByb290Q2FjaGUgPSBCb3g8Rml4ZWRBcnJheTxieXRlczwzMj4sIHR5cGVvZiBST09UX0NBQ0hFX1NJWkU+Pih7IGtleTogInIiIH0pOwogICAgYnl0ZWNfMSAvLyAiciIKICAgIC8vIGNvbnRyYWN0cy9taW1jX21lcmtsZS5hbGdvLnRzOjE2MQogICAgLy8gdGhpcy5yb290Q2FjaGUudmFsdWVbaW5kZXhdID0gcm9vdEhhc2g7CiAgICBzd2FwCiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9yZXBsYWNlCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoxNjMKICAgIC8vIHRoaXMucm9vdENvdW50ZXIudmFsdWUgKz0gMTsKICAgIGludGNfMiAvLyAxCiAgICArCiAgICAvLyBjb250cmFjdHMvbWltY19tZXJrbGUuYWxnby50czoyOQogICAgLy8gcm9vdENvdW50ZXIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAiYyIgfSk7CiAgICBieXRlY18zIC8vICJjIgogICAgLy8gY29udHJhY3RzL21pbWNfbWVya2xlLmFsZ28udHM6MTYzCiAgICAvLyB0aGlzLnJvb3RDb3VudGVyLnZhbHVlICs9IDE7CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAEIAABgJMCJgkBaQFyAWUBYwF0AmxyAXoEFR98dQMGgQExG0EAooIGBLF3RVEECFbAxARQqxFFBJ659XsEkxxPcQRgdyGANhoAjgYAZQBWAEoALwAQAAEAMRkURDEYRDYaAYgCBSRDMRkURDEYRDYaARc2GgKIAdeAAQAjTwJUJwdMULAkQzEZFEQxGEQ2GgGIAY2AAQAjTwJUJwdMULAkQzEZFEQxGESIAXEkQzEZFEQxGEQ2GgGIALMkQzEZFEQxGESIAEgkQzEZQP+KMRgURCRDigIAi/6BCgiLADIMDUEAKrGBBrIQgQWyGScIsh4nCLIfi/+NAgALAASzQv/bMgCyAUL/9SOyAUL/74mKAAAlI4j/vYGACK8ir1wAJIsBIgxBACGLAUkkCSILiwBJTwIiWElQ5gFLAiILTF2MACQIjAFC/9grI2coI2cpgcAMuUgnBosASU4CvycESwG/KiNngeAHIlgnBUxniYoBACNHA4AAMgCBAgslCCOI/1MjKGVMSU8CRIGAgICAEAxAAAqIAN4jKGVMjAVEIyhlRCQIKExnJwS+TIwCRCcGvkyMA0QjjASL/4wAiwQiDEEASosFJBpAADOLAEkVIhJEiwQiC4sCSwFLA12MAosDTCJYTIwBiwFMUOYBjACLBSSRjAWLBCQIjARC/7+LBCILiwJMIliMAYsAQv/ZJwSLAr8nBYsASU4CZ4gAromIAFSJigEBKb5EI4sBgTIMQQAciwEiC4sATCJYi/8SQQAEJIwAiYsBJAiMAUL/3CNC//CKAgGL/iIKi/4iGEwWKkxQvkRMIgsiWIv/EomKAQCL/4gAV4kjKGVERCMqZURJIgpLASIYTBYqTFBJgYAIuUgjJwVlREkVIhJETwIiC0y7JAgqTGcoI2cnBr5EJwRLAb8rI2cpvEgpgcAMuUiB4AciWCcFSwFniAABiYoBACMrZURJgTIYi/8VIhJEIgspTIv/uyQIK0xniQ==","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the MimcMerkleTest contract
 */
export type MimcMerkleTestArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrapTest()void': Record<string, never>
    'addLeafTest(byte[32])void': {
      leafHash: Uint8Array
    }
    'sealAndRotateTest()void': Record<string, never>
    'isValidRootTest(byte[32])bool': {
      root: Uint8Array
    }
    'isValidSealedRootTest(uint64,byte[32])bool': {
      epochId: bigint | number
      root: Uint8Array
    }
    'addRootTest(byte[32])void': {
      rootHash: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrapTest()void': []
    'addLeafTest(byte[32])void': [leafHash: Uint8Array]
    'sealAndRotateTest()void': []
    'isValidRootTest(byte[32])bool': [root: Uint8Array]
    'isValidSealedRootTest(uint64,byte[32])bool': [epochId: bigint | number, root: Uint8Array]
    'addRootTest(byte[32])void': [rootHash: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type MimcMerkleTestReturns = {
  'bootstrapTest()void': void
  'addLeafTest(byte[32])void': void
  'sealAndRotateTest()void': void
  'isValidRootTest(byte[32])bool': boolean
  'isValidSealedRootTest(uint64,byte[32])bool': boolean
  'addRootTest(byte[32])void': void
}

/**
 * Defines the types of available calls and state of the MimcMerkleTest smart contract.
 */
export type MimcMerkleTestTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrapTest()void' | 'bootstrapTest', {
      argsObj: MimcMerkleTestArgs['obj']['bootstrapTest()void']
      argsTuple: MimcMerkleTestArgs['tuple']['bootstrapTest()void']
      returns: MimcMerkleTestReturns['bootstrapTest()void']
    }>
    & Record<'addLeafTest(byte[32])void' | 'addLeafTest', {
      argsObj: MimcMerkleTestArgs['obj']['addLeafTest(byte[32])void']
      argsTuple: MimcMerkleTestArgs['tuple']['addLeafTest(byte[32])void']
      returns: MimcMerkleTestReturns['addLeafTest(byte[32])void']
    }>
    & Record<'sealAndRotateTest()void' | 'sealAndRotateTest', {
      argsObj: MimcMerkleTestArgs['obj']['sealAndRotateTest()void']
      argsTuple: MimcMerkleTestArgs['tuple']['sealAndRotateTest()void']
      returns: MimcMerkleTestReturns['sealAndRotateTest()void']
    }>
    & Record<'isValidRootTest(byte[32])bool' | 'isValidRootTest', {
      argsObj: MimcMerkleTestArgs['obj']['isValidRootTest(byte[32])bool']
      argsTuple: MimcMerkleTestArgs['tuple']['isValidRootTest(byte[32])bool']
      returns: MimcMerkleTestReturns['isValidRootTest(byte[32])bool']
    }>
    & Record<'isValidSealedRootTest(uint64,byte[32])bool' | 'isValidSealedRootTest', {
      argsObj: MimcMerkleTestArgs['obj']['isValidSealedRootTest(uint64,byte[32])bool']
      argsTuple: MimcMerkleTestArgs['tuple']['isValidSealedRootTest(uint64,byte[32])bool']
      returns: MimcMerkleTestReturns['isValidSealedRootTest(uint64,byte[32])bool']
    }>
    & Record<'addRootTest(byte[32])void' | 'addRootTest', {
      argsObj: MimcMerkleTestArgs['obj']['addRootTest(byte[32])void']
      argsTuple: MimcMerkleTestArgs['tuple']['addRootTest(byte[32])void']
      returns: MimcMerkleTestReturns['addRootTest(byte[32])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        rootCounter: bigint
        treeIndex: bigint
        epochId: bigint
        lastComputedRoot: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {
        rootCache: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
        subtree: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
        zeroHashes: [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
      }
      maps: {
        epochBoxes: Map<bigint | number, [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MimcMerkleTestSignatures = keyof MimcMerkleTestTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MimcMerkleTestNonVoidMethodSignatures = keyof MimcMerkleTestTypes['methods'] extends infer T ? T extends keyof MimcMerkleTestTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the MimcMerkleTest smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MimcMerkleTestSignatures> = MimcMerkleTestTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MimcMerkleTest smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MimcMerkleTestSignatures> = MimcMerkleTestTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MimcMerkleTestTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = MimcMerkleTestTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MimcMerkleTestCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MimcMerkleTestDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MimcMerkleTestCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the MimcMerkleTest smart contract
 */
export abstract class MimcMerkleTestParamsFactory {
  /**
   * Constructs a no op call for the bootstrapTest()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrapTest(params: CallParams<MimcMerkleTestArgs['obj']['bootstrapTest()void'] | MimcMerkleTestArgs['tuple']['bootstrapTest()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrapTest()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addLeafTest(byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLeafTest(params: CallParams<MimcMerkleTestArgs['obj']['addLeafTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addLeafTest(byte[32])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLeafTest(byte[32])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.leafHash],
    }
  }
  /**
   * Constructs a no op call for the sealAndRotateTest()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sealAndRotateTest(params: CallParams<MimcMerkleTestArgs['obj']['sealAndRotateTest()void'] | MimcMerkleTestArgs['tuple']['sealAndRotateTest()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sealAndRotateTest()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the isValidRootTest(byte[32])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isValidRootTest(params: CallParams<MimcMerkleTestArgs['obj']['isValidRootTest(byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidRootTest(byte[32])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isValidRootTest(byte[32])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.root],
    }
  }
  /**
   * Constructs a no op call for the isValidSealedRootTest(uint64,byte[32])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isValidSealedRootTest(params: CallParams<MimcMerkleTestArgs['obj']['isValidSealedRootTest(uint64,byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidSealedRootTest(uint64,byte[32])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isValidSealedRootTest(uint64,byte[32])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.epochId, params.args.root],
    }
  }
  /**
   * Constructs a no op call for the addRootTest(byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addRootTest(params: CallParams<MimcMerkleTestArgs['obj']['addRootTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addRootTest(byte[32])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addRootTest(byte[32])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rootHash],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the MimcMerkleTest smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MimcMerkleTestFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MimcMerkleTestFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MimcMerkleTestClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MimcMerkleTestClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the MimcMerkleTest smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MimcMerkleTestDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new MimcMerkleTestClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MimcMerkleTest smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MimcMerkleTest smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MimcMerkleTest smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new MimcMerkleTestClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the MimcMerkleTest smart contract
 */
export class MimcMerkleTestClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MimcMerkleTestClient`
   *
   * @param appClient An `AppClient` instance which has been created with the MimcMerkleTest app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MimcMerkleTestClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MimcMerkleTestNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MimcMerkleTestClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MimcMerkleTestClient> {
    return new MimcMerkleTestClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MimcMerkleTestClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MimcMerkleTestClient> {
    return new MimcMerkleTestClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the MimcMerkleTest smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `bootstrapTest()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrapTest: (params: CallParams<MimcMerkleTestArgs['obj']['bootstrapTest()void'] | MimcMerkleTestArgs['tuple']['bootstrapTest()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(MimcMerkleTestParamsFactory.bootstrapTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `addLeafTest(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLeafTest: (params: CallParams<MimcMerkleTestArgs['obj']['addLeafTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addLeafTest(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MimcMerkleTestParamsFactory.addLeafTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `sealAndRotateTest()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sealAndRotateTest: (params: CallParams<MimcMerkleTestArgs['obj']['sealAndRotateTest()void'] | MimcMerkleTestArgs['tuple']['sealAndRotateTest()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(MimcMerkleTestParamsFactory.sealAndRotateTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `isValidRootTest(byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isValidRootTest: (params: CallParams<MimcMerkleTestArgs['obj']['isValidRootTest(byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidRootTest(byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MimcMerkleTestParamsFactory.isValidRootTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `isValidSealedRootTest(uint64,byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isValidSealedRootTest: (params: CallParams<MimcMerkleTestArgs['obj']['isValidSealedRootTest(uint64,byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidSealedRootTest(uint64,byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MimcMerkleTestParamsFactory.isValidSealedRootTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `addRootTest(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addRootTest: (params: CallParams<MimcMerkleTestArgs['obj']['addRootTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addRootTest(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MimcMerkleTestParamsFactory.addRootTest(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the MimcMerkleTest smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `bootstrapTest()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrapTest: (params: CallParams<MimcMerkleTestArgs['obj']['bootstrapTest()void'] | MimcMerkleTestArgs['tuple']['bootstrapTest()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(MimcMerkleTestParamsFactory.bootstrapTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `addLeafTest(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLeafTest: (params: CallParams<MimcMerkleTestArgs['obj']['addLeafTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addLeafTest(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MimcMerkleTestParamsFactory.addLeafTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `sealAndRotateTest()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sealAndRotateTest: (params: CallParams<MimcMerkleTestArgs['obj']['sealAndRotateTest()void'] | MimcMerkleTestArgs['tuple']['sealAndRotateTest()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(MimcMerkleTestParamsFactory.sealAndRotateTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `isValidRootTest(byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isValidRootTest: (params: CallParams<MimcMerkleTestArgs['obj']['isValidRootTest(byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidRootTest(byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MimcMerkleTestParamsFactory.isValidRootTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `isValidSealedRootTest(uint64,byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isValidSealedRootTest: (params: CallParams<MimcMerkleTestArgs['obj']['isValidSealedRootTest(uint64,byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidSealedRootTest(uint64,byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MimcMerkleTestParamsFactory.isValidSealedRootTest(params))
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `addRootTest(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addRootTest: (params: CallParams<MimcMerkleTestArgs['obj']['addRootTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addRootTest(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MimcMerkleTestParamsFactory.addRootTest(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the MimcMerkleTest smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `bootstrapTest()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrapTest: async (params: CallParams<MimcMerkleTestArgs['obj']['bootstrapTest()void'] | MimcMerkleTestArgs['tuple']['bootstrapTest()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(MimcMerkleTestParamsFactory.bootstrapTest(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleTestReturns['bootstrapTest()void'])}
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `addLeafTest(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLeafTest: async (params: CallParams<MimcMerkleTestArgs['obj']['addLeafTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addLeafTest(byte[32])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MimcMerkleTestParamsFactory.addLeafTest(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleTestReturns['addLeafTest(byte[32])void'])}
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `sealAndRotateTest()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sealAndRotateTest: async (params: CallParams<MimcMerkleTestArgs['obj']['sealAndRotateTest()void'] | MimcMerkleTestArgs['tuple']['sealAndRotateTest()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(MimcMerkleTestParamsFactory.sealAndRotateTest(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleTestReturns['sealAndRotateTest()void'])}
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `isValidRootTest(byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isValidRootTest: async (params: CallParams<MimcMerkleTestArgs['obj']['isValidRootTest(byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidRootTest(byte[32])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MimcMerkleTestParamsFactory.isValidRootTest(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleTestReturns['isValidRootTest(byte[32])bool'])}
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `isValidSealedRootTest(uint64,byte[32])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isValidSealedRootTest: async (params: CallParams<MimcMerkleTestArgs['obj']['isValidSealedRootTest(uint64,byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidSealedRootTest(uint64,byte[32])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MimcMerkleTestParamsFactory.isValidSealedRootTest(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleTestReturns['isValidSealedRootTest(uint64,byte[32])bool'])}
    },

    /**
     * Makes a call to the MimcMerkleTest smart contract using the `addRootTest(byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addRootTest: async (params: CallParams<MimcMerkleTestArgs['obj']['addRootTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addRootTest(byte[32])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MimcMerkleTestParamsFactory.addRootTest(params))
      return {...result, return: result.return as unknown as (undefined | MimcMerkleTestReturns['addRootTest(byte[32])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MimcMerkleTestClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current MimcMerkleTest app
   */
  state = {
    /**
     * Methods to access global state for the current MimcMerkleTest app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          rootCounter: result.rootCounter,
          treeIndex: result.treeIndex,
          epochId: result.epochId,
          lastComputedRoot: new BinaryStateValue(result.lastComputedRoot),
        }
      },
      /**
       * Get the current value of the rootCounter key in global state
       */
      rootCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rootCounter")) as bigint | undefined },
      /**
       * Get the current value of the treeIndex key in global state
       */
      treeIndex: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("treeIndex")) as bigint | undefined },
      /**
       * Get the current value of the epochId key in global state
       */
      epochId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("epochId")) as bigint | undefined },
      /**
       * Get the current value of the lastComputedRoot key in global state
       */
      lastComputedRoot: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lastComputedRoot")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current MimcMerkleTest app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          rootCache: result.rootCache,
          subtree: result.subtree,
          zeroHashes: result.zeroHashes,
        }
      },
      /**
       * Get the current value of the rootCache key in box state
       */
      rootCache: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("rootCache")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get the current value of the subtree key in box state
       */
      subtree: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("subtree")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get the current value of the zeroHashes key in box state
       */
      zeroHashes: async (): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return (await this.appClient.state.box.getValue("zeroHashes")) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      /**
       * Get values from the epochBoxes map in box state
       */
      epochBoxes: {
        /**
         * Get all current values of the epochBoxes map in box state
         */
        getMap: async (): Promise<Map<bigint, [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]>> => { return (await this.appClient.state.box.getMap("epochBoxes")) as Map<bigint, [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]> },
        /**
         * Get a current value of the epochBoxes map by key from box state
         */
        value: async (key: bigint | number): Promise<[Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined> => { return await this.appClient.state.box.getMapValue("epochBoxes", key) as [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array] | undefined },
      },
    },
  }

  public newGroup(): MimcMerkleTestComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrapTest()void method call against the MimcMerkleTest contract
       */
      bootstrapTest(params: CallParams<MimcMerkleTestArgs['obj']['bootstrapTest()void'] | MimcMerkleTestArgs['tuple']['bootstrapTest()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrapTest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLeafTest(byte[32])void method call against the MimcMerkleTest contract
       */
      addLeafTest(params: CallParams<MimcMerkleTestArgs['obj']['addLeafTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addLeafTest(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLeafTest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sealAndRotateTest()void method call against the MimcMerkleTest contract
       */
      sealAndRotateTest(params: CallParams<MimcMerkleTestArgs['obj']['sealAndRotateTest()void'] | MimcMerkleTestArgs['tuple']['sealAndRotateTest()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sealAndRotateTest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a isValidRootTest(byte[32])bool method call against the MimcMerkleTest contract
       */
      isValidRootTest(params: CallParams<MimcMerkleTestArgs['obj']['isValidRootTest(byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidRootTest(byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isValidRootTest(params)))
        resultMappers.push((v) => client.decodeReturnValue('isValidRootTest(byte[32])bool', v))
        return this
      },
      /**
       * Add a isValidSealedRootTest(uint64,byte[32])bool method call against the MimcMerkleTest contract
       */
      isValidSealedRootTest(params: CallParams<MimcMerkleTestArgs['obj']['isValidSealedRootTest(uint64,byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidSealedRootTest(uint64,byte[32])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isValidSealedRootTest(params)))
        resultMappers.push((v) => client.decodeReturnValue('isValidSealedRootTest(uint64,byte[32])bool', v))
        return this
      },
      /**
       * Add a addRootTest(byte[32])void method call against the MimcMerkleTest contract
       */
      addRootTest(params: CallParams<MimcMerkleTestArgs['obj']['addRootTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addRootTest(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addRootTest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the MimcMerkleTest contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MimcMerkleTestComposer
  }
}
export type MimcMerkleTestComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrapTest()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrapTest(params?: CallParams<MimcMerkleTestArgs['obj']['bootstrapTest()void'] | MimcMerkleTestArgs['tuple']['bootstrapTest()void']>): MimcMerkleTestComposer<[...TReturns, MimcMerkleTestReturns['bootstrapTest()void'] | undefined]>

  /**
   * Calls the addLeafTest(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLeafTest(params?: CallParams<MimcMerkleTestArgs['obj']['addLeafTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addLeafTest(byte[32])void']>): MimcMerkleTestComposer<[...TReturns, MimcMerkleTestReturns['addLeafTest(byte[32])void'] | undefined]>

  /**
   * Calls the sealAndRotateTest()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sealAndRotateTest(params?: CallParams<MimcMerkleTestArgs['obj']['sealAndRotateTest()void'] | MimcMerkleTestArgs['tuple']['sealAndRotateTest()void']>): MimcMerkleTestComposer<[...TReturns, MimcMerkleTestReturns['sealAndRotateTest()void'] | undefined]>

  /**
   * Calls the isValidRootTest(byte[32])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isValidRootTest(params?: CallParams<MimcMerkleTestArgs['obj']['isValidRootTest(byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidRootTest(byte[32])bool']>): MimcMerkleTestComposer<[...TReturns, MimcMerkleTestReturns['isValidRootTest(byte[32])bool'] | undefined]>

  /**
   * Calls the isValidSealedRootTest(uint64,byte[32])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isValidSealedRootTest(params?: CallParams<MimcMerkleTestArgs['obj']['isValidSealedRootTest(uint64,byte[32])bool'] | MimcMerkleTestArgs['tuple']['isValidSealedRootTest(uint64,byte[32])bool']>): MimcMerkleTestComposer<[...TReturns, MimcMerkleTestReturns['isValidSealedRootTest(uint64,byte[32])bool'] | undefined]>

  /**
   * Calls the addRootTest(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRootTest(params?: CallParams<MimcMerkleTestArgs['obj']['addRootTest(byte[32])void'] | MimcMerkleTestArgs['tuple']['addRootTest(byte[32])void']>): MimcMerkleTestComposer<[...TReturns, MimcMerkleTestReturns['addRootTest(byte[32])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the MimcMerkleTest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MimcMerkleTestComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MimcMerkleTestComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MimcMerkleTestComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MimcMerkleTestComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MimcMerkleTestComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MimcMerkleTestComposerResults<TReturns>>
}
export type MimcMerkleTestComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

