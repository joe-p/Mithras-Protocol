pragma circom 2.1.5;


// plain execution of a mimc run
// m: message
// k: encryption key
// func (d *digest) encrypt(m fr.Element) fr.Element {
// 	once.Do(initConstants) // init constants
//
// 	var tmp fr.Element
// 	for i := 0; i < mimcNbRounds; i++ {
// 		// m = (m+k+c)^5
// 		tmp.Add(&m, &d.h).Add(&tmp, &mimcConstants[i])
// 		m.Square(&tmp).
// 			Square(&m).
// 			Mul(&m, &tmp)
// 	}
// 	m.Add(&m, &d.h)
// 	return m
// }
template Encrypt() {
    var C[111] =[
        13455917033551684388805986546318504194850770935911910752632064517024909471770, // 0
        36105173743233688698131949103649244090345277209041204920111145905001535976522, // 1
        4432073145102449319306094609970337344332667434652215431070992817798876885138, // 2
        10076633742842908130095836781560089881117188938276622901892546550850094816737, // 3
        796636033841689627732941016044857384234234277501564259311815186813195010627, // 4
        50826277908896052807607039263888665669592121977576798876911971151186688859055, // 5
        8344705685278765829729525786869451198465454541218502287970787410927998124522, // 6
        35998511508388700277878971790839128648971885531453996832238860174110999500586, // 7
        18183635788335456259215276538456634373878691301055828686319747253615002143747, // 8
        30323123799904289122080014114571802547699612123170549195354042606042013954036, // 9
        12947007899973511277335340479072112918759663880454700827376454658238239490287, // 10
        33371039706946221131896823154266650957676829319224235349015363695502653828989, // 11
        27784357766073635059728385796861499742120237254666505754545151839970885540792, // 12
        43160855038523589652640691634167173564245774369944777854664504388420946701066, // 13
        22994081237509973533016196041260758299947213684402142069502308834504842524074, // 14
        1320795241461842145682765991710777158129969458638201896235476626192124107670, // 15
        8231877132811199596376758288825197494440517476607659739835166243301765860904, // 16
        30223310548319093064739878503818077231292662776236544245657048097083269710716, // 17
        24070399260623189318973994901723838625475027937022760559079984482266917914918, // 18
        46995617475566511394300326641238164871541143367719457816773415138333621271747, // 19
        13285658195944621832380661340215410976335252803984178717370455326094720266840, // 20
        24951837112955150822420714280003084691491188104457662492267359070982612582724, // 21
        44798714887565164996336052489647074475980705852117274701961354191356129714933, // 22
        23136191045676110836006240309618629991309058328625141899547107734177934105284, // 23
        25918900782734843174006982177422667019760771541425044126903838222457080790762, // 24
        9456585747207468967136341612034989517427340607940281880317747335469436896657, // 25
        23784533343015378153006856120966274481837606158712875119035046603369925237333, // 26
        42759242036062342346688536504139312980212513696502949762681359951122279227201, // 27
        4136895936904138376202487314907288045120822712541316705628102997930875306009, // 28
        23149771165716491201920423185401326439934404974454477644507522033938419375958, // 29
        23695014760607119623043369899422738076382158967206163960603825989257726801270, // 30
        46013673779249068644868612837662889441038680454184704525526819406675648535145, // 31
        49936260613467856394876689344648752276855256947718527879134989889891277632770, // 32
        2159153222189174173490067225063044363535871059524538695070191871847470955412, // 33
        8366145246467021375422693136401222156713321373077068372411546648701944063037, // 34
        6396814763006431142778018052709382845229317990616980942304853341406226457497, // 35
        1528918281647336706687602488146634419827880017304652873443814617913125329787, // 36
        49787234927188522622322107555384700074367351894124720727557178620562534391947, // 37
        1255107154975108514881995629693509987810827346166880729138247132732398800605, // 38
        15131843848025795638266843204265591494253098765900322051547200938371934655740, // 39
        5056480146405086811789505170440731715530475328844870175949109998024731067467, // 40
        37628669125748141255858804556043629663603700493080743476086886521178409664319, // 41
        22379493041209909337294800237323296776350200286970403006721311082791718194262, // 42
        49032225639651844112524374030073760153036978285463701695560534780433245223849, // 43
        38110970679723360475519008450141696452914286810864353460220054282487073141682, // 44
        14632768325173884283300566709823675743961290053851644736464114177500335953414, // 45
        48031152672724269833302578109003566707023380763879583289459553516882312508784, // 46
        38034500677019077453732302061203984249164270741599160624390649349339022623393, // 47
        34012956866342066012820392426940783539407814856900218522068350312351319932747, // 48
        1316449090346410801845183915381769525990226349513436734911941391785200212382, // 49
        11231642642905482716413162879048407479059070481321080260598797846706122664059, // 50
        27703289250348329807600342298890287349371575249526359663711151044583275024741, // 51
        22571521386477356940523768733058560532247960914871341499561156735054027530831, // 52
        16449119652784672018453279488577293032638547027392355044846778114889744933505, // 53
        18358340181373245742856489324878059500109083493563555654399279196194914986550, // 54
        1706109811034862652960543598274606674872119241962072244804811880727743479090, // 55
        9180539993475470715702819756442883463424861615500635439640905447184335686321, // 56
        47391540669267957143263102893686206242961541208859215663379082509044306791343, // 57
        46220507494397991460322008572454961645000370540482720081569452719902337199420, // 58
        15143675381185307178500906868356334825651015737618718091251777377451213407009, // 59
        47415440798220926943548095142160577154144876089871364214816891050887464045880, // 60
        13636645527353090761427433756944006191318857406146294409351154576499989074448, // 61
        49803591768919235765767576335918155487135075124798916395995957388475682420563, // 62
        40840098604968650221786229983895110373264039096483978744472874474336582716562, // 63
        51451207546620505708731684375583768757747127270062013142821200942522312599514, // 64
        19623255796206582213343044956093476486139104852525580813879681620362890897558, // 65
        32513819260885919409774160716227575451809963545571602646885448127932366136971, // 66
        18271032611473066518574379295246725343109497835170563683555810856652610569038, // 67
        32304490791332157908773205399708511468936592681224015130543971203667015590197, // 68
        46872582347573239566160029350047577399737869653706660550801940202634780189074, // 69
        4224413053359434807569447660538804578348675818917444457557076663663520243836, // 70
        45097922981878279971946975628210957236349432610214193115770677741544707909567, // 71
        28925663492115069366812369529967921311078457164221145003350529650800182871746, // 72
        51827537454777180323994723343379981201169664299476821905051208437827506055814, // 73
        38672404987675649017981611270998991485637379892220839399888622694204498010547, // 74
        3600278227964710138244382395698346272046091699146154538484570942359304343365, // 75
        23828541255005299790050306622437619159673907082685772631950685291081519264507, // 76
        18092495413286015678790630168208787644418599959399842781132549515553139410584, // 77
        8281263925518236627757103541847237517086230172623051810302850712557851432991, // 78
        8448063354721769817902459808726146712448920033372308093934143713043950744991, // 79
        27109930081907039442588969686490074234814196180995484920678499447343448878496, // 80
        43689318308109817855877188240646097376459584050476678639865858128251723789373, // 81
        35139113304807065339045832828073755423845009535485603158211951310500042292252, // 82
        23650644224881775331537571419725579292695111422172599325469137724382933814731, // 83
        7637907586055940881746550270606881871499306561281721837109497146132490638703, // 84
        2642152591696505726583357170929470430913985263242151589269405978573127649865, // 85
        16455316775738428157495784461784259649533800783035454165492743673709497942877, // 86
        882700507159935720943118399658325854660412964012347429176422037985115882258, // 87
        23310019676472164725496705415405263215275747941103713297290919466430309290976, // 88
        3912027174088099540771427101094323472540269665880953189112136899729225711553, // 89
        26779125443551946723851966842526272845327846440580868972886303134451813221033, // 90
        10163406568392002086458658037379973320888055131825551173829633152008526239762, // 91
        11198961888624850740946105815368309038615496837175352239432238918070711465853, // 92
        11909653872466441525776090047727041987012741917206561105320879272791628035689, // 93
        1420374220234815122784699216957113842453134975436220082912418021695276802610, // 94
        33964049835590489294487429421371055682565062827655160564724423127453829089716, // 95
        38831954547416159208874855738227253512222803423237438301408058302325519592408, // 96
        6218831960903649756769607751293234186011544673685676795088558391636349217558, // 97
        25186633352157121843936165876916706371268246117244688775889438865799004246794, // 98
        23355615106085856913886316189095075363012643640135114474222706041996377427179, // 99
        7686344415884195068434388787471594459297892146591927259578945339164184879051, // 100
        51225322309228945023116618006592417857969520015827493424888152626033586925129, // 101
        21879478495006705672180486170487961960507706458195501864494732167763464429025, // 102
        25136507268427331851005620250569728639145260226529737023109590917210178817869, // 103
        38003332257348502234309692438166939851311319381443469349256898216075586673698, // 104
        24146736275901410142745382316434335210799709017123120835849837102831185753380, // 105
        33200692291719979593409875133368672092338301284613332360968325668743663110382, // 106
        946846991220209476320034264891531747089512397162778313999372941779941945739, // 107
        2882443813127861895205010344014631301476578399898408905078146194748453268764, // 108
        27910528068982011758503915580268485941549499303766285354722179016540609454692, // 109
        22788191563125794378649362095042023485357702798552706035706526724068908249030 // 110
    ];

    // Inputs
    signal input m;          // message / state
    signal input h;          // key

    // Output
    signal output out;

    // State per round (Circom forbids declarations inside loops)
    signal x[112];   // x[0] = m; after R rounds -> x[R]
    signal t[111];
    signal t2[111];
    signal t4[111];

    // init
    x[0] <== m;

    // rounds: x_{i+1} = (x_i + h + C[i])^5
    for (var i = 0; i < 111; i++) {
        t[i]  <== x[i] + h + C[i];   // tmp = m + h + c
        t2[i] <== t[i] * t[i];       // tmp^2
        t4[i] <== t2[i] * t2[i];     // tmp^4
        x[i+1] <== t4[i] * t[i];     // tmp^5
    }

    // final key addition: m + h
    out <== x[111] + h;
}

// Hash hash using Miyaguchi-Preneel:
// https://en.wikipedia.org/wiki/One-way_compression_function
// The XOR operation is replaced by field addition, data is in Montgomery form
// func (d *digest) checksum() fr.Element {
// 	// Write guarantees len(data) % BlockSize == 0
//
// 	// TODO @ThomasPiellard shouldn't Sum() returns an error if there is no data?
// 	// TODO: @Tabaie, @Thomas Piellard Now sure what to make of this
// 	/*if len(d.data) == 0 {
// 		d.data = make([]byte, BlockSize)
// 	}*/
//
// 	for i := range d.data {
// 		r := d.encrypt(d.data[i])
// 		d.h.Add(&r, &d.h).Add(&d.h, &d.data[i])
// 	}
//
// 	return d.h
// }
//
template Checksum(n) {
    signal input data[n];
    signal input h;
    signal output out;

    signal h_state[n+1];
    signal r[n];

    h_state[0] <== h;

    component encrypt[n];

    for (var i = 0; i < n; i++) {
        encrypt[i] = Encrypt();
        encrypt[i].m <== data[i];
        encrypt[i].h <== h_state[i];
        
        r[i] <== encrypt[i].out;
        h_state[i+1] <== r[i] + h_state[i] + data[i];
    }

    out <== h_state[n];
}

// func Sum(msg []byte) ([]byte, error) {
// 	var d digest
// 	if _, err := d.Write(msg); err != nil {
// 		return nil, err
// 	}
// 	h := d.checksum()
// 	bytes := h.Bytes()
// 	return bytes[:], nil
// }

template MiMC_Sum(n) {
    signal input msgs[n];
    signal output out;
    var h = 0;

    component checksum = Checksum(n);

    for (var i = 0; i < n; i++) {
        checksum.data[i] <== msgs[i];
    }
    checksum.h <== h;

    out <== checksum.out;
}


component main = MiMC_Sum(2);
